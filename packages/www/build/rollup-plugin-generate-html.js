"use strict";

const path = require("path");

const { dest } = require("./environment.js");

const script = (src) => `
    <script>
        function shimport(src) {
            try {
                new Function('import("' + src + '")')();
            } catch (e) {
                var s = document.createElement('script');
                s.src = 'https://unpkg.com/shimport';
                s.dataset.main = src;
                document.head.appendChild(s);
            }
        }

        shimport("/${src}");
    </script>
`;

const stylesheet = (href) => `<link href="/${href}" rel="stylesheet" />`;

module.exports = ({ bundle : previous }) => ({
    name : "rollup-plugin-generate-html",

    async generateBundle(options, bundle) {
        const prev = previous();

        if(!prev) {
            return;
        }

        Object.entries(prev).forEach(([ id, { isEntry, assets = [], imports = [], name }]) => {
            if(!isEntry) {
                return;
            }

            const page = require(path.join(dest, id));

            const fileName = name === "home" ? "index.html" : `${name}/index.html`;

            const styles = new Set();

            imports.forEach((dep) => {
                const { assets : css = [] } = prev[dep];
                
                css.forEach((href) => styles.add(stylesheet(href)));
            });

            assets.forEach((href) => styles.add(stylesheet(href)));

            const data = {
                styles,
            };

            // The REPL is special, need to go find the JS generated by the second build
            // as well as any assets and ensure they get passed to the page
            if(name === "repl") {
                const [ js, chunk ] = Object.entries(bundle)
                    .find(([ , { isEntry : entry, name : ident }]) => (entry && ident === "repl"));
                
                data.script = script(js);

                // CSS is a bit more complicated due to the facade
                chunk.imports.forEach((ref) => {
                    const imported = bundle[ref];
                    
                    if(!imported.assets) {
                        return;
                    }

                    imported.assets.forEach((asset) => styles.add(stylesheet(asset)));
                });
            }

            data.styles = [ ...data.styles.values() ];

            const { html } = page.render(data);

            this.emitFile({
                type   : "asset",
                source : html,
                fileName,
            });
        });
    },
});
