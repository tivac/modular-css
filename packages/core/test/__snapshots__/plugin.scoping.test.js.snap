// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/plugins /scoping.js :global() should include :global(...) identifiers in a message 1`] = `
Array [
  Object {
    "keyframes": Object {
      "e": Array [
        "e",
      ],
    },
    "plugin": "modular-css-scoping",
    "type": "modular-css",
  },
  Object {
    "classes": Object {
      "a": Array [
        "a",
      ],
      "b": Array [
        "b",
      ],
      "c": Array [
        "c",
      ],
      "d": Array [
        "d",
      ],
    },
    "plugin": "modular-css-scoping",
    "type": "modular-css",
  },
]
`;

exports[`/plugins /scoping.js :global() should remove :global() from non-class/non-id selectors 1`] = `"p { color: red; }"`;

exports[`/plugins /scoping.js :global() should support mixed local & global selectors 1`] = `"#a, .a_b { color: red; }"`;

exports[`/plugins /scoping.js :global() should support mixed local & global selectors 2`] = `".a .a_b { color: red; }"`;

exports[`/plugins /scoping.js :global() should support mixed local & global selectors 3`] = `".a_a .b { color: red; }"`;

exports[`/plugins /scoping.js :global() should support mixed local & global selectors 4`] = `".a_b { color: red; } .c { color: blue; }"`;

exports[`/plugins /scoping.js :global() should support mixed local & global selectors 5`] = `".a_a .b .a_c { color: red; }"`;

exports[`/plugins /scoping.js :global() should support mixing local & global selectors in a single string 1`] = `".a_c .a { color: red; }"`;

exports[`/plugins /scoping.js :global() should support mixing local & global selectors in a single string 2`] = `
Array [
  Object {
    "classes": Object {
      "a": Array [
        "a",
      ],
      "c": Array [
        "a_c",
      ],
    },
    "plugin": "modular-css-scoping",
    "type": "modular-css",
  },
]
`;

exports[`/plugins /scoping.js :global() should support multiple selectors 1`] = `".a .b { color: red; }"`;

exports[`/plugins /scoping.js :global() shouldn't transform global selectors 1`] = `".a { color: red; }"`;

exports[`/plugins /scoping.js :global() shouldn't transform global selectors 2`] = `"#a { color: red; }"`;

exports[`/plugins /scoping.js :global() shouldn't transform global selectors 3`] = `"@media (max-width: 100px) { .b { color: red; } }"`;

exports[`/plugins /scoping.js :global() shouldn't transform global selectors 4`] = `"@keyframes c { 0% { color: red; } 100% { color: black; } }"`;

exports[`/plugins /scoping.js should expose original names in a message 1`] = `
Array [
  Object {
    "keyframes": Object {
      "c": Array [
        "a_c",
      ],
    },
    "plugin": "modular-css-scoping",
    "type": "modular-css",
  },
  Object {
    "classes": Object {
      "a": Array [
        "a_a",
      ],
      "b": Array [
        "a_b",
      ],
    },
    "plugin": "modular-css-scoping",
    "type": "modular-css",
  },
]
`;

exports[`/plugins /scoping.js should generate a prefix for class names 1`] = `".a_a { color: red; }"`;

exports[`/plugins /scoping.js should generate a prefix for ids 1`] = `"#a_a { color: red; }"`;

exports[`/plugins /scoping.js should ignore non-class/non-id selectors 1`] = `"p { color: red; }"`;

exports[`/plugins /scoping.js should transform class/id selectors 1`] = `".a_a p { color: red; }"`;

exports[`/plugins /scoping.js should transform class/id selectors 2`] = `"#a_a p { color: red; }"`;

exports[`/plugins /scoping.js should transform class/id selectors 3`] = `"#a_a .a_b { color: red; }"`;

exports[`/plugins /scoping.js should transform class/id selectors 4`] = `"#a_a { color: red; } #a_a:hover { color: blue; }"`;

exports[`/plugins /scoping.js should transform class/id selectors 5`] = `".a_a { color: red; } .a_a:hover { color: black; }"`;

exports[`/plugins /scoping.js should transform multiple grouped selectors  1`] = `".a_one, .a_two { color: red; }"`;

exports[`/plugins /scoping.js should transform selectors within media queries 1`] = `"@media (max-width: 100px) { .a_b { color: red; } }"`;

exports[`/plugins /scoping.js should transform the names of @keyframes rules 1`] = `"@keyframes a_a { }"`;

exports[`/plugins /scoping.js should transform the names of @keyframes rules 2`] = `"@-webkit-keyframes a_a { }"`;

exports[`/plugins /scoping.js should transform the names of @keyframes rules 3`] = `"@-moz-keyframes a_a { }"`;
