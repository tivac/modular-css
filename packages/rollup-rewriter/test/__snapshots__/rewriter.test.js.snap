// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rollup-rewriter should error on unsupported formats (cjs) 1`] = `"Unsupported format: cjs. Supported formats are ["amd","es","esm","system"]"`;

exports[`rollup-rewriter should ignore unknown imports (amd) 1`] = `
{
  "a.js": "
define(['require', 'external'], (function (require, external) { 'use strict';

    const a$1 = "mc_a";
    var css = {
        a: a$1
    };

    function a() {
        console.log(css, external);

        new Promise(function (resolve, reject) { Promise.all([
    lazyload("./assets/c.css"),
    new Promise(function (resolve, reject) { require(['./c'], resolve, reject) })
])
.then((results) => resolve(results[results.length - 1]))
.catch(reject); }).then(console.log);
    }

    return a;

}));
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/external-import/a.css */
.mc_a { color: aqua; }
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/external-import/c.css */
.mc_c {
    color: cyan;
}
",
  "c.js": "
define(['exports'], (function (exports) { 'use strict';

    const c = "mc_c";
    var css = {
        c
    };

    console.log(css);

    exports.default = css;

}));
",
}
`;

exports[`rollup-rewriter should ignore unknown imports (es) 1`] = `
{
  "a.js": "
import external from 'external';

const a$1 = "mc_a";
var css = {
    a: a$1
};

function a() {
    console.log(css, external);

    Promise.all([
    lazyload("./assets/c.css"),
    import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { a as default };
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/external-import/a.css */
.mc_a { color: aqua; }
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/external-import/c.css */
.mc_c {
    color: cyan;
}
",
  "c.js": "
const c = "mc_c";
var css = {
    c
};

console.log(css);

export { css as default };
",
}
`;

exports[`rollup-rewriter should ignore unknown imports (esm) 1`] = `
{
  "a.js": "
import external from 'external';

const a$1 = "mc_a";
var css = {
    a: a$1
};

function a() {
    console.log(css, external);

    Promise.all([
    lazyload("./assets/c.css"),
    import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { a as default };
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/external-import/a.css */
.mc_a { color: aqua; }
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/external-import/c.css */
.mc_c {
    color: cyan;
}
",
  "c.js": "
const c = "mc_c";
var css = {
    c
};

console.log(css);

export { css as default };
",
}
`;

exports[`rollup-rewriter should ignore unknown imports (system) 1`] = `
{
  "a.js": "
System.register(['external'], (function (exports, module) {
    'use strict';
    var external;
    return {
        setters: [function (module) {
            external = module.default;
        }],
        execute: (function () {

            exports('default', a);

            const a$1 = "mc_a";
            var css = {
                a: a$1
            };

            function a() {
                console.log(css, external);

                Promise.all([
    lazyload("./assets/c.css"),
    module.import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
            }

        })
    };
}));
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/external-import/a.css */
.mc_a { color: aqua; }
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/external-import/c.css */
.mc_c {
    color: cyan;
}
",
  "c.js": "
System.register([], (function (exports) {
    'use strict';
    return {
        execute: (function () {

            const c = "mc_c";
            var css = exports('default', {
                c
            });

            console.log(css);

        })
    };
}));
",
}
`;

exports[`rollup-rewriter should include css for static imports used by a dynamic import (amd) 1`] = `
{
  "assets/dynamic1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/dynamic1.css */
.mc_dynamic1 {
    color: dynamic1;
}
",
  "assets/entry1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/entry1.css */
.mc_entry1 {
    color: entry1;
}
",
  "assets/entry2.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/entry2.css */
.mc_entry2 {
    color: entry2;
}
",
  "assets/static1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/static1.css */
.mc_static1 {
    color: static1;
}
",
  "dynamic1.js": "
define(['exports', './static1'], (function (exports, static1) { 'use strict';

    const dynamic1$1 = "mc_dynamic1";
    var css = {
        dynamic1: dynamic1$1
    };

    console.log(static1.static1, css);

    var dynamic1 = "dynamic1.js";

    exports.default = dynamic1;

}));
",
  "entry1.js": "
define(['./static1'], (function (static1) { 'use strict';

    const entry1 = "mc_entry1";
    var css = {
        entry1
    };

    console.log(static1.static1, css);

}));
",
  "entry2.js": "
define(['require'], (function (require) { 'use strict';

    const entry2 = "mc_entry2";
    var css = {
        entry2
    };

    console.log(css);

    (function() {
        new Promise(function (resolve, reject) { Promise.all([
    lazyload("./assets/static1.css"),
lazyload("./assets/dynamic1.css"),
    new Promise(function (resolve, reject) { require(['./dynamic1'], resolve, reject) })
])
.then((results) => resolve(results[results.length - 1]))
.catch(reject); }).then(console.log);
    }());

}));
",
  "static1.js": "
define(['exports'], (function (exports) { 'use strict';

    const static1$1 = "mc_static1";
    var css = {
        static1: static1$1
    };

    console.log(css);

    var static1 = "static1.js";

    exports.static1 = static1;

}));
",
}
`;

exports[`rollup-rewriter should include css for static imports used by a dynamic import (es) 1`] = `
{
  "assets/dynamic1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/dynamic1.css */
.mc_dynamic1 {
    color: dynamic1;
}
",
  "assets/entry1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/entry1.css */
.mc_entry1 {
    color: entry1;
}
",
  "assets/entry2.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/entry2.css */
.mc_entry2 {
    color: entry2;
}
",
  "assets/static1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/static1.css */
.mc_static1 {
    color: static1;
}
",
  "dynamic1.js": "
import { s as static1 } from './static1.js';

const dynamic1$1 = "mc_dynamic1";
var css = {
    dynamic1: dynamic1$1
};

console.log(static1, css);

var dynamic1 = "dynamic1.js";

export { dynamic1 as default };
",
  "entry1.js": "
import { s as static1 } from './static1.js';

const entry1 = "mc_entry1";
var css = {
    entry1
};

console.log(static1, css);
",
  "entry2.js": "
const entry2 = "mc_entry2";
var css = {
    entry2
};

console.log(css);

(function() {
    Promise.all([
    lazyload("./assets/static1.css"),
lazyload("./assets/dynamic1.css"),
    import('./dynamic1.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}());
",
  "static1.js": "
const static1$1 = "mc_static1";
var css = {
    static1: static1$1
};

console.log(css);

var static1 = "static1.js";

export { static1 as s };
",
}
`;

exports[`rollup-rewriter should include css for static imports used by a dynamic import (esm) 1`] = `
{
  "assets/dynamic1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/dynamic1.css */
.mc_dynamic1 {
    color: dynamic1;
}
",
  "assets/entry1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/entry1.css */
.mc_entry1 {
    color: entry1;
}
",
  "assets/entry2.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/entry2.css */
.mc_entry2 {
    color: entry2;
}
",
  "assets/static1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/static1.css */
.mc_static1 {
    color: static1;
}
",
  "dynamic1.js": "
import { s as static1 } from './static1.js';

const dynamic1$1 = "mc_dynamic1";
var css = {
    dynamic1: dynamic1$1
};

console.log(static1, css);

var dynamic1 = "dynamic1.js";

export { dynamic1 as default };
",
  "entry1.js": "
import { s as static1 } from './static1.js';

const entry1 = "mc_entry1";
var css = {
    entry1
};

console.log(static1, css);
",
  "entry2.js": "
const entry2 = "mc_entry2";
var css = {
    entry2
};

console.log(css);

(function() {
    Promise.all([
    lazyload("./assets/static1.css"),
lazyload("./assets/dynamic1.css"),
    import('./dynamic1.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}());
",
  "static1.js": "
const static1$1 = "mc_static1";
var css = {
    static1: static1$1
};

console.log(css);

var static1 = "static1.js";

export { static1 as s };
",
}
`;

exports[`rollup-rewriter should include css for static imports used by a dynamic import (system) 1`] = `
{
  "assets/dynamic1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/dynamic1.css */
.mc_dynamic1 {
    color: dynamic1;
}
",
  "assets/entry1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/entry1.css */
.mc_entry1 {
    color: entry1;
}
",
  "assets/entry2.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/entry2.css */
.mc_entry2 {
    color: entry2;
}
",
  "assets/static1.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-shared-imports/static1.css */
.mc_static1 {
    color: static1;
}
",
  "dynamic1.js": "
System.register(['./static1.js'], (function (exports) {
    'use strict';
    var static1;
    return {
        setters: [function (module) {
            static1 = module.s;
        }],
        execute: (function () {

            const dynamic1$1 = "mc_dynamic1";
            var css = {
                dynamic1: dynamic1$1
            };

            console.log(static1, css);

            var dynamic1 = exports('default', "dynamic1.js");

        })
    };
}));
",
  "entry1.js": "
System.register(['./static1.js'], (function () {
    'use strict';
    var static1;
    return {
        setters: [function (module) {
            static1 = module.s;
        }],
        execute: (function () {

            const entry1 = "mc_entry1";
            var css = {
                entry1
            };

            console.log(static1, css);

        })
    };
}));
",
  "entry2.js": "
System.register([], (function (exports, module) {
    'use strict';
    return {
        execute: (function () {

            const entry2 = "mc_entry2";
            var css = {
                entry2
            };

            console.log(css);

            (function() {
                Promise.all([
    lazyload("./assets/static1.css"),
lazyload("./assets/dynamic1.css"),
    module.import('./dynamic1.js')
])
.then((results) => results[results.length - 1]).then(console.log);
            }());

        })
    };
}));
",
  "static1.js": "
System.register([], (function (exports) {
    'use strict';
    return {
        execute: (function () {

            const static1$1 = "mc_static1";
            var css = {
                static1: static1$1
            };

            console.log(css);

            var static1 = exports('s', "static1.js");

        })
    };
}));
",
}
`;

exports[`rollup-rewriter should log details in verbose mode 1`] = `
[
  [
    "[rewriter]",
    "Updating",
    "a.js",
  ],
  [
    "[rewriter]",
    "Updating",
    "b.js",
  ],
]
`;

exports[`rollup-rewriter should only rewrite when necessary (amd) 1`] = `
{
  "a.js": "
define(['require'], (function (require) { 'use strict';

	const a = "mc_a";
	var css = {
	    a
	};

	console.log(css);

	new Promise(function (resolve, reject) { Promise.all([
    lazyload("./assets/c.css"),
    new Promise(function (resolve, reject) { require(['./c'], resolve, reject) })
])
.then((results) => resolve(results[results.length - 1]))
.catch(reject); }).then(console.log);

}));
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/a.css */
.mc_a { color: aqua; }
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/b.css */
.mc_b { color: blue; }
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/c.css */
.mc_c { color: crimson; }
",
  "b.js": "
define(['require'], (function (require) { 'use strict';

	const b = "mc_b";
	var css = {
	    b
	};

	console.log(css);

	new Promise(function (resolve, reject) { require(['./d'], resolve, reject); }).then(console.log);

}));
",
  "c.js": "
define(['exports'], (function (exports) { 'use strict';

	const c$1 = "mc_c";
	var css = {
	    c: c$1
	};

	console.log(css);

	var c = "c";

	exports.default = c;

}));
",
  "d.js": "
define(['exports'], (function (exports) { 'use strict';

	var d = "d";

	exports.default = d;

}));
",
}
`;

exports[`rollup-rewriter should only rewrite when necessary (es) 1`] = `
{
  "a.js": "
const a = "mc_a";
var css = {
    a
};

console.log(css);

Promise.all([
    lazyload("./assets/c.css"),
    import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/a.css */
.mc_a { color: aqua; }
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/b.css */
.mc_b { color: blue; }
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/c.css */
.mc_c { color: crimson; }
",
  "b.js": "
const b = "mc_b";
var css = {
    b
};

console.log(css);

import('./d.js').then(console.log);
",
  "c.js": "
const c$1 = "mc_c";
var css = {
    c: c$1
};

console.log(css);

var c = "c";

export { c as default };
",
  "d.js": "
var d = "d";

export { d as default };
",
}
`;

exports[`rollup-rewriter should only rewrite when necessary (esm) 1`] = `
{
  "a.js": "
const a = "mc_a";
var css = {
    a
};

console.log(css);

Promise.all([
    lazyload("./assets/c.css"),
    import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/a.css */
.mc_a { color: aqua; }
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/b.css */
.mc_b { color: blue; }
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/c.css */
.mc_c { color: crimson; }
",
  "b.js": "
const b = "mc_b";
var css = {
    b
};

console.log(css);

import('./d.js').then(console.log);
",
  "c.js": "
const c$1 = "mc_c";
var css = {
    c: c$1
};

console.log(css);

var c = "c";

export { c as default };
",
  "d.js": "
var d = "d";

export { d as default };
",
}
`;

exports[`rollup-rewriter should only rewrite when necessary (system) 1`] = `
{
  "a.js": "
System.register([], (function (exports, module) {
	'use strict';
	return {
		execute: (function () {

			const a = "mc_a";
			var css = {
			    a
			};

			console.log(css);

			Promise.all([
    lazyload("./assets/c.css"),
    module.import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);

		})
	};
}));
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/a.css */
.mc_a { color: aqua; }
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/b.css */
.mc_b { color: blue; }
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/no-asset-imports/c.css */
.mc_c { color: crimson; }
",
  "b.js": "
System.register([], (function (exports, module) {
	'use strict';
	return {
		execute: (function () {

			const b = "mc_b";
			var css = {
			    b
			};

			console.log(css);

			module.import('./d.js').then(console.log);

		})
	};
}));
",
  "c.js": "
System.register([], (function (exports) {
	'use strict';
	return {
		execute: (function () {

			const c$1 = "mc_c";
			var css = {
			    c: c$1
			};

			console.log(css);

			var c = exports('default', "c");

		})
	};
}));
",
  "d.js": "
System.register([], (function (exports) {
	'use strict';
	return {
		execute: (function () {

			var d = exports('default', "d");

		})
	};
}));
",
}
`;

exports[`rollup-rewriter should support loader & loadfn (amd) 1`] = `
{
  "a.js": "
define(['require'], (function (require) { 'use strict';
import lazyload from "./css.js";

    const a$1 = "mc_a";
    var css = {
        a: a$1
    };

    function a() {
        console.log(css);

        new Promise(function (resolve, reject) { Promise.all([
    lazyload("./assets/c.css"),
    new Promise(function (resolve, reject) { require(['./c'], resolve, reject) })
])
.then((results) => resolve(results[results.length - 1]))
.catch(reject); }).then(console.log);
    }

    return a;

}));
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/a.css */
.mc_a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/b.css */
.mc_b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/c.css */
.mc_c {
    color: cyan;
}
",
  "assets/d.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/d.css */
.mc_d {
    color: darkred;
}
",
  "b.js": "
define(['require'], (function (require) { 'use strict';
import lazyload from "./css.js";

    const b$1 = "mc_b";
    var css = {
        b: b$1
    };

    function b() {
        console.log(css);

        new Promise(function (resolve, reject) { Promise.all([
    lazyload("./assets/d.css"),
    new Promise(function (resolve, reject) { require(['./d'], resolve, reject) })
])
.then((results) => resolve(results[results.length - 1]))
.catch(reject); }).then(console.log);
    }

    return b;

}));
",
  "c.js": "
define(['exports'], (function (exports) { 'use strict';

    const c = "mc_c";
    var css = {
        c
    };

    console.log(css);

    exports.default = css;

}));
",
  "d.js": "
define(['exports'], (function (exports) { 'use strict';

    const d = "mc_d";
    var css = {
        d
    };

    console.log(css);

    exports.default = css;

}));
",
}
`;

exports[`rollup-rewriter should support loader & loadfn (es) 1`] = `
{
  "a.js": "
import lazyload from "./css.js";
const a$1 = "mc_a";
var css = {
    a: a$1
};

function a() {
    console.log(css);

    Promise.all([
    lazyload("./assets/c.css"),
    import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { a as default };
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/a.css */
.mc_a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/b.css */
.mc_b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/c.css */
.mc_c {
    color: cyan;
}
",
  "assets/d.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/d.css */
.mc_d {
    color: darkred;
}
",
  "b.js": "
import lazyload from "./css.js";
const b$1 = "mc_b";
var css = {
    b: b$1
};

function b() {
    console.log(css);

    Promise.all([
    lazyload("./assets/d.css"),
    import('./d.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { b as default };
",
  "c.js": "
const c = "mc_c";
var css = {
    c
};

console.log(css);

export { css as default };
",
  "d.js": "
const d = "mc_d";
var css = {
    d
};

console.log(css);

export { css as default };
",
}
`;

exports[`rollup-rewriter should support loader & loadfn (esm) 1`] = `
{
  "a.js": "
import lazyload from "./css.js";
const a$1 = "mc_a";
var css = {
    a: a$1
};

function a() {
    console.log(css);

    Promise.all([
    lazyload("./assets/c.css"),
    import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { a as default };
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/a.css */
.mc_a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/b.css */
.mc_b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/c.css */
.mc_c {
    color: cyan;
}
",
  "assets/d.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/d.css */
.mc_d {
    color: darkred;
}
",
  "b.js": "
import lazyload from "./css.js";
const b$1 = "mc_b";
var css = {
    b: b$1
};

function b() {
    console.log(css);

    Promise.all([
    lazyload("./assets/d.css"),
    import('./d.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { b as default };
",
  "c.js": "
const c = "mc_c";
var css = {
    c
};

console.log(css);

export { css as default };
",
  "d.js": "
const d = "mc_d";
var css = {
    d
};

console.log(css);

export { css as default };
",
}
`;

exports[`rollup-rewriter should support loader & loadfn (system) 1`] = `
{
  "a.js": "
System.register([], (function (exports, module) {
    'use strict';
import lazyload from "./css.js";
    return {
        execute: (function () {

            exports('default', a);

            const a$1 = "mc_a";
            var css = {
                a: a$1
            };

            function a() {
                console.log(css);

                Promise.all([
    lazyload("./assets/c.css"),
    module.import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
            }

        })
    };
}));
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/a.css */
.mc_a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/b.css */
.mc_b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/c.css */
.mc_c {
    color: cyan;
}
",
  "assets/d.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/d.css */
.mc_d {
    color: darkred;
}
",
  "b.js": "
System.register([], (function (exports, module) {
    'use strict';
import lazyload from "./css.js";
    return {
        execute: (function () {

            exports('default', b);

            const b$1 = "mc_b";
            var css = {
                b: b$1
            };

            function b() {
                console.log(css);

                Promise.all([
    lazyload("./assets/d.css"),
    module.import('./d.js')
])
.then((results) => results[results.length - 1]).then(console.log);
            }

        })
    };
}));
",
  "c.js": "
System.register([], (function (exports) {
    'use strict';
    return {
        execute: (function () {

            const c = "mc_c";
            var css = exports('default', {
                c
            });

            console.log(css);

        })
    };
}));
",
  "d.js": "
System.register([], (function (exports) {
    'use strict';
    return {
        execute: (function () {

            const d = "mc_d";
            var css = exports('default', {
                d
            });

            console.log(css);

        })
    };
}));
",
}
`;

exports[`rollup-rewriter should support loader being a function (amd) 1`] = `
{
  "a": "
define(['require'], (function (require) { 'use strict';
import chunkCountIs8 from "./css.js";

    const a$1 = "mc_a";
    var css = {
        a: a$1
    };

    function a() {
        console.log(css);

        new Promise(function (resolve, reject) { Promise.all([
    lazyload("./assets/c.css"),
    new Promise(function (resolve, reject) { require(['./c'], resolve, reject) })
])
.then((results) => resolve(results[results.length - 1]))
.catch(reject); }).then(console.log);
    }

    return a;

}));
",
  "b": "
define(['require'], (function (require) { 'use strict';
import chunkCountIs8 from "./css.js";

    const b$1 = "mc_b";
    var css = {
        b: b$1
    };

    function b() {
        console.log(css);

        new Promise(function (resolve, reject) { Promise.all([
    lazyload("./assets/d.css"),
    new Promise(function (resolve, reject) { require(['./d'], resolve, reject) })
])
.then((results) => resolve(results[results.length - 1]))
.catch(reject); }).then(console.log);
    }

    return b;

}));
",
  "c": "
define(['exports'], (function (exports) { 'use strict';

    const c = "mc_c";
    var css = {
        c
    };

    console.log(css);

    exports.default = css;

}));
",
  "d": "
define(['exports'], (function (exports) { 'use strict';

    const d = "mc_d";
    var css = {
        d
    };

    console.log(css);

    exports.default = css;

}));
",
}
`;

exports[`rollup-rewriter should support loader being a function (es) 1`] = `
{
  "a": "
import chunkCountIs8 from "./css.js";
const a$1 = "mc_a";
var css = {
    a: a$1
};

function a() {
    console.log(css);

    Promise.all([
    lazyload("./assets/c.css"),
    import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { a as default };
",
  "b": "
import chunkCountIs8 from "./css.js";
const b$1 = "mc_b";
var css = {
    b: b$1
};

function b() {
    console.log(css);

    Promise.all([
    lazyload("./assets/d.css"),
    import('./d.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { b as default };
",
  "c": "
const c = "mc_c";
var css = {
    c
};

console.log(css);

export { css as default };
",
  "d": "
const d = "mc_d";
var css = {
    d
};

console.log(css);

export { css as default };
",
}
`;

exports[`rollup-rewriter should support loader being a function (esm) 1`] = `
{
  "a": "
import chunkCountIs8 from "./css.js";
const a$1 = "mc_a";
var css = {
    a: a$1
};

function a() {
    console.log(css);

    Promise.all([
    lazyload("./assets/c.css"),
    import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { a as default };
",
  "b": "
import chunkCountIs8 from "./css.js";
const b$1 = "mc_b";
var css = {
    b: b$1
};

function b() {
    console.log(css);

    Promise.all([
    lazyload("./assets/d.css"),
    import('./d.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { b as default };
",
  "c": "
const c = "mc_c";
var css = {
    c
};

console.log(css);

export { css as default };
",
  "d": "
const d = "mc_d";
var css = {
    d
};

console.log(css);

export { css as default };
",
}
`;

exports[`rollup-rewriter should support loader being a function (system) 1`] = `
{
  "a": "
System.register([], (function (exports, module) {
    'use strict';
import chunkCountIs8 from "./css.js";
    return {
        execute: (function () {

            exports('default', a);

            const a$1 = "mc_a";
            var css = {
                a: a$1
            };

            function a() {
                console.log(css);

                Promise.all([
    lazyload("./assets/c.css"),
    module.import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
            }

        })
    };
}));
",
  "b": "
System.register([], (function (exports, module) {
    'use strict';
import chunkCountIs8 from "./css.js";
    return {
        execute: (function () {

            exports('default', b);

            const b$1 = "mc_b";
            var css = {
                b: b$1
            };

            function b() {
                console.log(css);

                Promise.all([
    lazyload("./assets/d.css"),
    module.import('./d.js')
])
.then((results) => results[results.length - 1]).then(console.log);
            }

        })
    };
}));
",
  "c": "
System.register([], (function (exports) {
    'use strict';
    return {
        execute: (function () {

            const c = "mc_c";
            var css = exports('default', {
                c
            });

            console.log(css);

        })
    };
}));
",
  "d": "
System.register([], (function (exports) {
    'use strict';
    return {
        execute: (function () {

            const d = "mc_d";
            var css = exports('default', {
                d
            });

            console.log(css);

        })
    };
}));
",
}
`;

exports[`rollup-rewriter shouldn't require a loader (amd) 1`] = `
{
  "a.js": "
define(['require'], (function (require) { 'use strict';

    const a$1 = "mc_a";
    var css = {
        a: a$1
    };

    function a() {
        console.log(css);

        new Promise(function (resolve, reject) { Promise.all([
    lazyload("./assets/c.css"),
    new Promise(function (resolve, reject) { require(['./c'], resolve, reject) })
])
.then((results) => resolve(results[results.length - 1]))
.catch(reject); }).then(console.log);
    }

    return a;

}));
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/a.css */
.mc_a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/b.css */
.mc_b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/c.css */
.mc_c {
    color: cyan;
}
",
  "assets/d.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/d.css */
.mc_d {
    color: darkred;
}
",
  "b.js": "
define(['require'], (function (require) { 'use strict';

    const b$1 = "mc_b";
    var css = {
        b: b$1
    };

    function b() {
        console.log(css);

        new Promise(function (resolve, reject) { Promise.all([
    lazyload("./assets/d.css"),
    new Promise(function (resolve, reject) { require(['./d'], resolve, reject) })
])
.then((results) => resolve(results[results.length - 1]))
.catch(reject); }).then(console.log);
    }

    return b;

}));
",
  "c.js": "
define(['exports'], (function (exports) { 'use strict';

    const c = "mc_c";
    var css = {
        c
    };

    console.log(css);

    exports.default = css;

}));
",
  "d.js": "
define(['exports'], (function (exports) { 'use strict';

    const d = "mc_d";
    var css = {
        d
    };

    console.log(css);

    exports.default = css;

}));
",
}
`;

exports[`rollup-rewriter shouldn't require a loader (es) 1`] = `
{
  "a.js": "
const a$1 = "mc_a";
var css = {
    a: a$1
};

function a() {
    console.log(css);

    Promise.all([
    lazyload("./assets/c.css"),
    import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { a as default };
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/a.css */
.mc_a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/b.css */
.mc_b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/c.css */
.mc_c {
    color: cyan;
}
",
  "assets/d.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/d.css */
.mc_d {
    color: darkred;
}
",
  "b.js": "
const b$1 = "mc_b";
var css = {
    b: b$1
};

function b() {
    console.log(css);

    Promise.all([
    lazyload("./assets/d.css"),
    import('./d.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { b as default };
",
  "c.js": "
const c = "mc_c";
var css = {
    c
};

console.log(css);

export { css as default };
",
  "d.js": "
const d = "mc_d";
var css = {
    d
};

console.log(css);

export { css as default };
",
}
`;

exports[`rollup-rewriter shouldn't require a loader (esm) 1`] = `
{
  "a.js": "
const a$1 = "mc_a";
var css = {
    a: a$1
};

function a() {
    console.log(css);

    Promise.all([
    lazyload("./assets/c.css"),
    import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { a as default };
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/a.css */
.mc_a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/b.css */
.mc_b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/c.css */
.mc_c {
    color: cyan;
}
",
  "assets/d.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/d.css */
.mc_d {
    color: darkred;
}
",
  "b.js": "
const b$1 = "mc_b";
var css = {
    b: b$1
};

function b() {
    console.log(css);

    Promise.all([
    lazyload("./assets/d.css"),
    import('./d.js')
])
.then((results) => results[results.length - 1]).then(console.log);
}

export { b as default };
",
  "c.js": "
const c = "mc_c";
var css = {
    c
};

console.log(css);

export { css as default };
",
  "d.js": "
const d = "mc_d";
var css = {
    d
};

console.log(css);

export { css as default };
",
}
`;

exports[`rollup-rewriter shouldn't require a loader (system) 1`] = `
{
  "a.js": "
System.register([], (function (exports, module) {
    'use strict';
    return {
        execute: (function () {

            exports('default', a);

            const a$1 = "mc_a";
            var css = {
                a: a$1
            };

            function a() {
                console.log(css);

                Promise.all([
    lazyload("./assets/c.css"),
    module.import('./c.js')
])
.then((results) => results[results.length - 1]).then(console.log);
            }

        })
    };
}));
",
  "assets/a.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/a.css */
.mc_a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/b.css */
.mc_b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/c.css */
.mc_c {
    color: cyan;
}
",
  "assets/d.css": "
/* packages/rollup-rewriter/test/specimens/dynamic-imports/d.css */
.mc_d {
    color: darkred;
}
",
  "b.js": "
System.register([], (function (exports, module) {
    'use strict';
    return {
        execute: (function () {

            exports('default', b);

            const b$1 = "mc_b";
            var css = {
                b: b$1
            };

            function b() {
                console.log(css);

                Promise.all([
    lazyload("./assets/d.css"),
    module.import('./d.js')
])
.then((results) => results[results.length - 1]).then(console.log);
            }

        })
    };
}));
",
  "c.js": "
System.register([], (function (exports) {
    'use strict';
    return {
        execute: (function () {

            const c = "mc_c";
            var css = exports('default', {
                c
            });

            console.log(css);

        })
    };
}));
",
  "d.js": "
System.register([], (function (exports) {
    'use strict';
    return {
        execute: (function () {

            const d = "mc_d";
            var css = exports('default', {
                d
            });

            console.log(css);

        })
    };
}));
",
}
`;
