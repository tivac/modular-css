// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/svelte.js should extract CSS from a <link> tag ("existing script") 1`] = `
"
<div class=\\"flex wrapper\\">
    <h1 class=\\"flex fooga hd\\">Head</h1>
    <div class=\\"fooga wooga bd\\">
        <p class=\\"{bool ? \\"text\\" : \\"active\\" }\\">Text</p>
    </div>
</div>

<script>
import css from \\"./external.css\\";


export default {
    data : () => ({
        bool : true
    }),

    oncreate() {
        const bd = {
            flex : \\"flex\\"
        };

        const style = css[bd.flex];
    }
};
</script>
"
`;

exports[`/svelte.js should extract CSS from a <link> tag ("existing script") 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.wooga {

    background: blue;
}
/* packages/svelte/test/specimens/external.css */
.flex {
    display: flex;
}
.text {
    color: #000;
}
.active {
    color: #F00;
}
"
`;

exports[`/svelte.js should extract CSS from a <link> tag ("no script") 1`] = `
"
<div class=\\"flex wrapper\\">
    <h1 class=\\"flex fooga hd\\">Head</h1>
    <div class=\\"fooga wooga bd\\">
        <p class=\\"{bool ? \\"text\\" : \\"active\\" }\\">Text</p>
    </div>
</div>
<script>
    import css from \\"./external.css\\";
</script>"
`;

exports[`/svelte.js should extract CSS from a <link> tag ("no script") 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.wooga {

    background: blue;
}
/* packages/svelte/test/specimens/external.css */
.flex {
    display: flex;
}
.text {
    color: #000;
}
.active {
    color: #F00;
}
"
`;

exports[`/svelte.js should extract CSS from a <link> tag ("single quotes") 1`] = `
"
<div class=\\"flex wrapper\\">
    <h1 class=\\"flex fooga hd\\">Head</h1>
    <div class=\\"fooga wooga bd\\">
        <p class=\\"{bool ? \\"text\\" : \\"active\\" }\\">Text</p>
    </div>
</div>
<script>
    import css from \\"./external.css\\";
</script>"
`;

exports[`/svelte.js should extract CSS from a <link> tag ("single quotes") 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.wooga {

    background: blue;
}
/* packages/svelte/test/specimens/external.css */
.flex {
    display: flex;
}
.text {
    color: #000;
}
.active {
    color: #F00;
}
"
`;

exports[`/svelte.js should extract CSS from a <link> tag ("unquoted") 1`] = `
"
<div class=\\"flex wrapper\\">
    <h1 class=\\"flex fooga hd\\">Head</h1>
    <div class=\\"fooga wooga bd\\">
        <p class=\\"{bool ? \\"text\\" : \\"active\\" }\\">Text</p>
    </div>
</div>
<script>
    import css from \\"./external.css\\";
</script>"
`;

exports[`/svelte.js should extract CSS from a <link> tag ("unquoted") 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.wooga {

    background: blue;
}
/* packages/svelte/test/specimens/external.css */
.flex {
    display: flex;
}
.text {
    color: #000;
}
.active {
    color: #F00;
}
"
`;

exports[`/svelte.js should extract CSS from a <link> tag ("values") 1`] = `
"
<div
    data-simple=\\"color: #BEEFED\\"
    data-expression=\\"{\\"color: \\" + \\"#BEEFED\\"}\\"
    data-template=\\"{\`color: \${\\"#BEEFED\\"}\`}\\"
>
</div>

<script>
import css from \\"./external.css\\";


    export default {
        data : () => ({
            template : \`color: \${\\"#BEEFED\\"}\`,
            expression : \\"color: \\" + \\"#BEEFED\\",
        })
    };
</script>
"
`;

exports[`/svelte.js should extract CSS from a <link> tag ("values") 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.wooga {

    background: blue;
}
/* packages/svelte/test/specimens/external.css */
.flex {
    display: flex;
}
.text {
    color: #000;
}
.active {
    color: #F00;
}
"
`;

exports[`/svelte.js should extract CSS from a <style> tag 1`] = `
"<div class=\\"flex wrapper\\">
    <h1 class=\\"flex fooga hd\\">Head</h1>
    <div class=\\"fooga wooga bd\\">
        <p class=\\"{bool ? \\"text\\" : \\"active\\" }\\">Text</p>
    </div>
</div>

<style>/* replaced by modular-css */</style>

<script>
export default {
    data : () => ({
        bool : true
    })
};
</script>
"
`;

exports[`/svelte.js should extract CSS from a <style> tag 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.wooga {

    background: blue;
}
/* packages/svelte/test/specimens/style.html */
.flex {
        display: flex;
    }
.text {
        color: #000;
    }
.active {
        color: #F00;
    }
"
`;

exports[`/svelte.js should handle errors: "empty css file - <link>" 1`] = `"@modular-css/svelte: Unable to find .nope, .alsonope in \\"./empty.css\\""`;

exports[`/svelte.js should handle errors: "empty css file - <link>" 2`] = `
Array [
  Array [
    "@modular-css/svelte: Unable to find .nope in \\"./empty.css\\"",
  ],
  Array [
    "@modular-css/svelte: Unable to find .alsonope in \\"./empty.css\\"",
  ],
]
`;

exports[`/svelte.js should handle errors: "empty css file - <link>" 3`] = `
"
<div class=\\"{css.nope}\\">NOPE</div>
<div class=\\"{css.alsonope}\\">STILL NOPE</div>
<script>
    import css from \\"./empty.css\\";
</script>"
`;

exports[`/svelte.js should handle errors: "empty css file - <style>" 1`] = `"@modular-css/svelte: Unable to find .nope, .alsonope in \\"<style>\\""`;

exports[`/svelte.js should handle errors: "empty css file - <style>" 2`] = `
Array [
  Array [
    "@modular-css/svelte: Unable to find .nope in \\"<style>\\"",
  ],
  Array [
    "@modular-css/svelte: Unable to find .alsonope in \\"<style>\\"",
  ],
]
`;

exports[`/svelte.js should handle errors: "empty css file - <style>" 3`] = `
"<div class=\\"{css.nope}\\">NOPE</div>
<div class=\\"{css.alsonope}\\">STILL NOPE</div>

<style>/* replaced by modular-css */</style>
"
`;

exports[`/svelte.js should handle errors: "invalid reference <script> - <link>" 1`] = `"@modular-css/svelte: Unable to find .nuhuh in \\"./invalid.css\\""`;

exports[`/svelte.js should handle errors: "invalid reference <script> - <link>" 2`] = `
Array [
  Array [
    "@modular-css/svelte: Unable to find .nuhuh in \\"./invalid.css\\"",
  ],
]
`;

exports[`/svelte.js should handle errors: "invalid reference <script> - <link>" 3`] = `
"
<h2 class=\\"yup\\">Yup</h2>

<script>
import css from \\"./invalid.css\\";


    console.log(css.nuhuh);
</script>
"
`;

exports[`/svelte.js should handle errors: "invalid reference <script> - <style>" 1`] = `"@modular-css/svelte: Unable to find .nuhuh in \\"<style>\\""`;

exports[`/svelte.js should handle errors: "invalid reference <script> - <style>" 2`] = `
Array [
  Array [
    "@modular-css/svelte: Unable to find .nuhuh in \\"<style>\\"",
  ],
]
`;

exports[`/svelte.js should handle errors: "invalid reference <script> - <style>" 3`] = `
"<h2 class=\\"yup\\">Yup</h2>

<style>/* replaced by modular-css */</style>

<script>
    console.log(css.nuhuh);
</script>
"
`;

exports[`/svelte.js should handle errors: "invalid reference template - <link>" 1`] = `"@modular-css/svelte: Unable to find .nope in \\"./invalid.css\\""`;

exports[`/svelte.js should handle errors: "invalid reference template - <link>" 2`] = `
Array [
  Array [
    "@modular-css/svelte: Unable to find .nope in \\"./invalid.css\\"",
  ],
]
`;

exports[`/svelte.js should handle errors: "invalid reference template - <link>" 3`] = `
"
<h1 class=\\"{css.nope}\\">Nope</h1>
<h2 class=\\"yup\\">Yup</h2>
<script>
    import css from \\"./invalid.css\\";
</script>"
`;

exports[`/svelte.js should handle errors: "invalid reference template - <style>" 1`] = `"@modular-css/svelte: Unable to find .nope in \\"<style>\\""`;

exports[`/svelte.js should handle errors: "invalid reference template - <style>" 2`] = `
Array [
  Array [
    "@modular-css/svelte: Unable to find .nope in \\"<style>\\"",
  ],
]
`;

exports[`/svelte.js should handle errors: "invalid reference template - <style>" 3`] = `
"<h1 class=\\"{css.nope}\\">Nope</h1>
<h2 class=\\"yup\\">Yup</h2>

<style>/* replaced by modular-css */</style>
"
`;

exports[`/svelte.js should ignore <links> that reference a URL 1`] = `
"<link rel=\\"stylesheet\\" href=\\"http://example.com/styles.css\\" />

<div class=\\"fooga\\">fooga</div>
<script>
    import css from \\"./simple.css\\";
</script>"
`;

exports[`/svelte.js should ignore <links> that reference a URL 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.fooga {
    color: red;
}
"
`;

exports[`/svelte.js should ignore files without <style> blocks 1`] = `
"<h1>Hello</h1>
<script>console.log(\\"output\\")</script>"
`;

exports[`/svelte.js should ignore files without <style> blocks 2`] = `""`;

exports[`/svelte.js should invalidate files before reprocessing (<link>) 1`] = `
"<div class=\\"source\\">Source</div><script>
    import css from \\"./source.css\\";
</script>"
`;

exports[`/svelte.js should invalidate files before reprocessing (<link>) 2`] = `
"/* packages/svelte/test/output/source.css */
.source {
    color: red;
}"
`;

exports[`/svelte.js should invalidate files before reprocessing (<link>) 3`] = `
"<div class=\\"source\\">Source</div><script>
    import css from \\"./source.css\\";
</script>"
`;

exports[`/svelte.js should invalidate files before reprocessing (<link>) 4`] = `
"/* packages/svelte/test/output/source.css */
.source {
    color: blue;
}"
`;

exports[`/svelte.js should invalidate files before reprocessing (<style>) 1`] = `
"<style>/* replaced by modular-css */</style>
<div class=\\"source\\">Source</div>"
`;

exports[`/svelte.js should invalidate files before reprocessing (<style>) 2`] = `
"/* packages/svelte/test/output/source.html */
.source { color: red; }"
`;

exports[`/svelte.js should invalidate files before reprocessing (<style>) 3`] = `
"<style>/* replaced by modular-css */</style>
<div class=\\"source\\">Source</div>"
`;

exports[`/svelte.js should invalidate files before reprocessing (<style>) 4`] = `
"/* packages/svelte/test/output/source.html */
.source { color: blue; }"
`;

exports[`/svelte.js should no-op if all <link>s reference a URL 1`] = `
"<link rel=\\"stylesheet\\" href=\\"http://example.com/styles.css\\" />
<link rel=\\"stylesheet\\" href=\\"http://example.com/styles2.css\\" />

<div class=\\"fooga\\">fooga</div>
"
`;

exports[`/svelte.js should support verbose output: "<link>" 1`] = `
Array [
  Array [
    "[svelte]",
    "Processing",
    "packages/svelte/test/specimens/external.html",
  ],
  Array [
    "[svelte]",
    "extract <link>",
    "packages/svelte/test/specimens/external.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/svelte/test/specimens/external.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/external.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/external.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/external.css",
  ],
  Array [
    "[svelte]",
    "updating source {css.<key>} references from",
    "./external.css",
  ],
  Array [
    "[svelte]",
    "[\\"color\\",\\"flex\\",\\"wrapper\\",\\"hd\\",\\"bd\\",\\"text\\",\\"active\\"]",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/external.css",
  ],
]
`;

exports[`/svelte.js should support verbose output: "<style>" 1`] = `
Array [
  Array [
    "[svelte]",
    "Processing",
    "packages/svelte/test/specimens/style.html",
  ],
  Array [
    "[svelte]",
    "extract <style>",
  ],
  Array [
    "[processor]",
    "string()",
    "packages/svelte/test/specimens/style.html",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/style.html",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/style.html",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/style.html",
  ],
  Array [
    "[svelte]",
    "updating source {css.<key>} references from",
    "<style>",
  ],
  Array [
    "[svelte]",
    "[\\"flex\\",\\"wrapper\\",\\"hd\\",\\"bd\\",\\"text\\",\\"active\\"]",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/style.html",
  ],
]
`;

exports[`/svelte.js should throw on both <style> and <link> in one file 1`] = `"@modular-css/svelte: use <style> OR <link>, but not both"`;

exports[`/svelte.js should use an already-created processor 1`] = `
"<link rel=\\"stylesheet\\" href=\\"http://example.com/styles.css\\" />

<div class=\\"fooga\\">fooga</div>
<script>
    import css from \\"./simple.css\\";
</script>"
`;

exports[`/svelte.js should use an already-created processor 2`] = `
"/* fake.css */
.fake { color: #F00; }
/* packages/svelte/test/specimens/simple.css */
.fooga {
    color: red;
}"
`;

exports[`/svelte.js should warn when multiple <link> elements are in the html 1`] = `
"<link rel=\\"stylesheet\\" href=\\"./simple2.css\\" />

<div class=\\"fooga\\">fooga</div>
<div class=\\"{css.booga}\\">booga</div>
<script>
    import css from \\"./simple.css\\";
</script>"
`;

exports[`/svelte.js should warn when multiple <link> elements are in the html 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.fooga {
    color: red;
}
"
`;

exports[`/svelte.js should warn when multiple <link> elements are in the html 3`] = `
Array [
  Array [
    "@modular-css/svelte will only use the first local <link> tag",
  ],
  Array [
    "@modular-css/svelte: Unable to find .booga in \\"./simple.css\\"",
  ],
]
`;
