// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/svelte.js should expose CSS errors in a useful way (non-css file) 1`] = `
Array [
  Array [
    "Possible invalid <link> href: ./error-link.svelte",
  ],
]
`;

exports[`/svelte.js should extract CSS from a <link> tag (existing script) 1`] = `
"<div class=\\"mc_flex mc_wrapper\\">
    <h1 class=\\"mc_fooga mc_flex mc_hd\\">Head</h1>
    <div class=\\"mc_fooga mc_wooga mc_bd\\">
        <p class=\\"{bool ? \\"mc_text\\" : \\"mc_active\\" }\\">Text</p>
    </div>
</div>

<script>
import css from \\"./external.css\\";


export default {
    data : () => ({
        bool : true
    }),

    oncreate() {
        const bd = {
            flex : \\"flex\\"
        };

        const style = css[bd.flex];
    }
};
</script>
"
`;

exports[`/svelte.js should extract CSS from a <link> tag (existing script) 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.mc_wooga {
    background: blue;
}
/* packages/svelte/test/specimens/external.css */
.mc_flex {
    display: flex;
}
.mc_text {
    color: #000;
}
.mc_active {
    color: #F00;
}
"
`;

exports[`/svelte.js should extract CSS from a <link> tag (no script) 1`] = `
"<div class=\\"mc_flex mc_wrapper\\">
    <h1 class=\\"mc_fooga mc_flex mc_hd\\">Head</h1>
    <div class=\\"mc_fooga mc_wooga mc_bd\\">
        <p class=\\"{bool ? \\"mc_text\\" : \\"mc_active\\" }\\">Text</p>
    </div>
</div>
<script>import css from \\"./external.css\\";</script>"
`;

exports[`/svelte.js should extract CSS from a <link> tag (no script) 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.mc_wooga {
    background: blue;
}
/* packages/svelte/test/specimens/external.css */
.mc_flex {
    display: flex;
}
.mc_text {
    color: #000;
}
.mc_active {
    color: #F00;
}
"
`;

exports[`/svelte.js should extract CSS from a <link> tag (single quotes) 1`] = `
"<div class=\\"mc_flex mc_wrapper\\">
    <h1 class=\\"mc_fooga mc_flex mc_hd\\">Head</h1>
    <div class=\\"mc_fooga mc_wooga mc_bd\\">
        <p class=\\"{bool ? \\"mc_text\\" : \\"mc_active\\" }\\">Text</p>
    </div>
</div>
<script>import css from \\"./external.css\\";</script>"
`;

exports[`/svelte.js should extract CSS from a <link> tag (single quotes) 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.mc_wooga {
    background: blue;
}
/* packages/svelte/test/specimens/external.css */
.mc_flex {
    display: flex;
}
.mc_text {
    color: #000;
}
.mc_active {
    color: #F00;
}
"
`;

exports[`/svelte.js should extract CSS from a <link> tag (unquoted) 1`] = `
"<div class=\\"mc_flex mc_wrapper\\">
    <h1 class=\\"mc_fooga mc_flex mc_hd\\">Head</h1>
    <div class=\\"mc_fooga mc_wooga mc_bd\\">
        <p class=\\"{bool ? \\"mc_text\\" : \\"mc_active\\" }\\">Text</p>
    </div>
</div>
<script>import css from \\"./external.css\\";</script>"
`;

exports[`/svelte.js should extract CSS from a <link> tag (unquoted) 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.mc_wooga {
    background: blue;
}
/* packages/svelte/test/specimens/external.css */
.mc_flex {
    display: flex;
}
.mc_text {
    color: #000;
}
.mc_active {
    color: #F00;
}
"
`;

exports[`/svelte.js should extract CSS from a <link> tag (values) 1`] = `
"<div
    data-simple=\\"color: #BEEFED\\"
    data-expression=\\"{\\"color: \\" + \\"#BEEFED\\"}\\"
    data-template=\\"{\`color: \${\\"#BEEFED\\"}\`}\\"
>
</div>

<script>
import css from \\"./external.css\\";


    export default {
        data : () => ({
            template : \`color: \${\\"#BEEFED\\"}\`,
            expression : \\"color: \\" + \\"#BEEFED\\",
        })
    };
</script>
"
`;

exports[`/svelte.js should extract CSS from a <link> tag (values) 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.mc_wooga {
    background: blue;
}
/* packages/svelte/test/specimens/external.css */
.mc_flex {
    display: flex;
}
.mc_text {
    color: #000;
}
.mc_active {
    color: #F00;
}
"
`;

exports[`/svelte.js should extract CSS from a <style> tag 1`] = `
"<div class=\\"mc_flex mc_wrapper\\">
    <h1 class=\\"mc_fooga mc_flex mc_hd\\">Head</h1>
    <div class=\\"mc_fooga mc_wooga mc_bd\\">
        <p class=\\"{bool ? \\"mc_text\\" : \\"mc_active\\" }\\">Text</p>
    </div>
</div>

<script>
export default {
    data : () => ({
        bool : true
    })
};
</script>
"
`;

exports[`/svelte.js should extract CSS from a <style> tag 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
/* packages/svelte/test/specimens/dependencies.css */
.mc_wooga {
    background: blue;
}
/* packages/svelte/test/specimens/style.svelte */
.mc_flex {
        display: flex;
    }
.mc_text {
        color: #000;
    }
.mc_active {
        color: #F00;
    }
"
`;

exports[`/svelte.js should handle errors: empty css file - <link> 1`] = `"[@modular-css/svelte] Unable to find .nope, .nopedynope, .alsonope in \\"./empty.css\\""`;

exports[`/svelte.js should handle errors: empty css file - <link> 2`] = `
Array [
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .nope in ./empty.css",
  ],
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .nopedynope in ./empty.css",
  ],
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .alsonope in ./empty.css",
  ],
]
`;

exports[`/svelte.js should handle errors: empty css file - <link> 3`] = `
"<div class=\\"{\\"css.nope\\"}\\">NOPE</div>
<div class=\\"{\\"css.nopedynope\\"}\\">NOPEDY NOPE</div>
<div class=\\"{\\"css.alsonope\\"}\\">STILL NOPE</div>
<script>import css from \\"./empty.css\\";</script>"
`;

exports[`/svelte.js should handle errors: empty css file - <style> 1`] = `"[@modular-css/svelte] Unable to find .nope, .alsonope in \\"<style>\\""`;

exports[`/svelte.js should handle errors: empty css file - <style> 2`] = `
Array [
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .nope in <style>",
  ],
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .alsonope in <style>",
  ],
]
`;

exports[`/svelte.js should handle errors: empty css file - <style> 3`] = `
"<div class=\\"{\\"css.nope\\"}\\">NOPE</div>
<div class=\\"{\\"css.alsonope\\"}\\">STILL NOPE</div>

"
`;

exports[`/svelte.js should handle errors: invalid reference <script> - <link> 1`] = `"[@modular-css/svelte] Unable to find .nuhuh, .alsono in \\"./invalid.css\\""`;

exports[`/svelte.js should handle errors: invalid reference <script> - <link> 2`] = `
Array [
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .nuhuh in ./invalid.css",
  ],
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .alsono in ./invalid.css",
  ],
]
`;

exports[`/svelte.js should handle errors: invalid reference <script> - <link> 3`] = `
"<h2 class=\\"mc_yup\\">Yup</h2>

<script>
import css from \\"./invalid.css\\";


    console.log(\\"css.nuhuh\\");
    console.log(\\"css.alsono\\");
</script>
"
`;

exports[`/svelte.js should handle errors: invalid reference <script> - <style> 1`] = `"[@modular-css/svelte] Unable to find .nuhuh, .alsono in \\"<style>\\""`;

exports[`/svelte.js should handle errors: invalid reference <script> - <style> 2`] = `
Array [
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .nuhuh in <style>",
  ],
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .alsono in <style>",
  ],
]
`;

exports[`/svelte.js should handle errors: invalid reference <script> - <style> 3`] = `
"<h2 class=\\"mc_yup\\">Yup</h2>

<script>
    console.log(\\"css.nuhuh\\");
    console.log(\\"css.alsono\\");
</script>
"
`;

exports[`/svelte.js should handle errors: invalid reference template - <link> 1`] = `"[@modular-css/svelte] Unable to find .nope, .stillnope in \\"./invalid.css\\""`;

exports[`/svelte.js should handle errors: invalid reference template - <link> 2`] = `
Array [
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .nope in ./invalid.css",
  ],
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .stillnope in ./invalid.css",
  ],
]
`;

exports[`/svelte.js should handle errors: invalid reference template - <link> 3`] = `
"<h1 class=\\"{\\"css.nope\\"}\\">Nope</h1>
<h2 class=\\"mc_yup\\">Yup</h2>
<h3 class=\\"{\\"css.stillnope\\"}\\">Still Nope</h3>
<script>import css from \\"./invalid.css\\";</script>"
`;

exports[`/svelte.js should handle errors: invalid reference template - <style> 1`] = `"[@modular-css/svelte] Unable to find .nope, .alsonope in \\"<style>\\""`;

exports[`/svelte.js should handle errors: invalid reference template - <style> 2`] = `
Array [
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .nope in <style>",
  ],
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .alsonope in <style>",
  ],
]
`;

exports[`/svelte.js should handle errors: invalid reference template - <style> 3`] = `
"<h1 class=\\"{\\"css.nope\\"}\\">Nope</h1>
<h2 class=\\"mc_yup\\">Yup</h2>
<h3 class=\\"{\\"css.alsonope\\"}\\">Also Nope</h3>

"
`;

exports[`/svelte.js should ignore <links> that reference a URL 1`] = `
"<link rel=\\"stylesheet\\" href=\\"http://example.com/styles.css\\" />
<div class=\\"mc_fooga\\">fooga</div>
<script>import css from \\"./simple.css\\";</script>"
`;

exports[`/svelte.js should ignore <links> that reference a URL 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
"
`;

exports[`/svelte.js should ignore <style> tags without the text/m-css attribute 1`] = `
"<style>
    .no { color: red; }
</style>

"
`;

exports[`/svelte.js should ignore <style> tags without the text/m-css attribute 2`] = `
"/* packages/svelte/test/specimens/style-no-attribute.svelte */
.mc_yes { color: blue; }
"
`;

exports[`/svelte.js should ignore files without <style> blocks 1`] = `
"<h1>Hello</h1>
<script>console.log(\\"output\\")</script>"
`;

exports[`/svelte.js should ignore files without <style> blocks 2`] = `""`;

exports[`/svelte.js should invalidate files before reprocessing (<link>) 1`] = `"<div class=\\"mc_source\\">Source</div><script>import css from \\"./source.css\\";</script>"`;

exports[`/svelte.js should invalidate files before reprocessing (<link>) 2`] = `
"/* packages/svelte/test/output/source.css */
.mc_source {
    color: red;
}"
`;

exports[`/svelte.js should invalidate files before reprocessing (<link>) 3`] = `"<div class=\\"mc_source\\">Source</div><script>import css from \\"./source.css\\";</script>"`;

exports[`/svelte.js should invalidate files before reprocessing (<link>) 4`] = `
"/* packages/svelte/test/output/source.css */
.mc_source {
    color: blue;
}"
`;

exports[`/svelte.js should invalidate files before reprocessing (<style>) 1`] = `"<div class=\\"mc_source\\">Source</div>"`;

exports[`/svelte.js should invalidate files before reprocessing (<style>) 2`] = `
"/* packages/svelte/test/output/source.svelte */
.mc_source { color: red; }"
`;

exports[`/svelte.js should invalidate files before reprocessing (<style>) 3`] = `"<div class=\\"mc_source\\">Source</div>"`;

exports[`/svelte.js should invalidate files before reprocessing (<style>) 4`] = `
"/* packages/svelte/test/output/source.svelte */
.mc_source { color: blue; }"
`;

exports[`/svelte.js should no-op if all <link>s reference a URL 1`] = `
"<link rel=\\"stylesheet\\" href=\\"http://example.com/styles.css\\" />
<link rel=\\"stylesheet\\" href=\\"http://example.com/styles2.css\\" />

<div class=\\"fooga\\">fooga</div>
"
`;

exports[`/svelte.js should support verbose output: <link> 1`] = `
Array [
  Array [
    "[@modular-css/svelte]",
    "Processing",
    "packages/svelte/test/specimens/external.svelte",
  ],
  Array [
    "[@modular-css/svelte]",
    "extract <link>",
    "packages/svelte/test/specimens/external.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/svelte/test/specimens/external.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/external.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/external.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/external.css",
  ],
  Array [
    "[@modular-css/svelte]",
    "processed styles",
    "packages/svelte/test/specimens/external.svelte",
  ],
  Array [
    "[@modular-css/svelte]",
    "updating source {css.<key>} references from",
    "./external.css",
  ],
  Array [
    "[@modular-css/svelte]",
    "[\\"flex\\",\\"wrapper\\",\\"hd\\",\\"bd\\",\\"text\\",\\"active\\"]",
  ],
  Array [
    "[@modular-css/svelte]",
    "updating source {cssvalue.<key>} references from",
    "./external.css",
  ],
  Array [
    "[@modular-css/svelte]",
    "[\\"color\\"]",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/external.css",
  ],
]
`;

exports[`/svelte.js should support verbose output: <style> 1`] = `
Array [
  Array [
    "[@modular-css/svelte]",
    "Processing",
    "packages/svelte/test/specimens/style.svelte",
  ],
  Array [
    "[@modular-css/svelte]",
    "extract <style>",
    "packages/svelte/test/specimens/style.svelte",
  ],
  Array [
    "[processor]",
    "string()",
    "packages/svelte/test/specimens/style.svelte",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/style.svelte",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/style.svelte",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/svelte/test/specimens/style.svelte",
  ],
  Array [
    "[@modular-css/svelte]",
    "processed styles",
    "packages/svelte/test/specimens/style.svelte",
  ],
  Array [
    "[@modular-css/svelte]",
    "updating source {css.<key>} references from",
    "<style>",
  ],
  Array [
    "[@modular-css/svelte]",
    "[\\"flex\\",\\"wrapper\\",\\"hd\\",\\"bd\\",\\"text\\",\\"active\\"]",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/dependencies.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/svelte/test/specimens/style.svelte",
  ],
]
`;

exports[`/svelte.js should use an already-created processor 1`] = `
"<link rel=\\"stylesheet\\" href=\\"http://example.com/styles.css\\" />
<div class=\\"mc_fooga\\">fooga</div>
<script>import css from \\"./simple.css\\";</script>"
`;

exports[`/svelte.js should use an already-created processor 2`] = `
"/* fake.css */
.mc_fake { color: #F00; }
/* packages/svelte/test/specimens/simple.css */
.mc_fooga {
    color: red;
}"
`;

exports[`/svelte.js should use modular-css's file resolver 1`] = `
"<div class=\\"mc_fooga\\">fooga</div>
<script>import css from \\"./does-not-exist.css\\";</script>"
`;

exports[`/svelte.js should use modular-css's file resolver 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
"
`;

exports[`/svelte.js should wait for files to finish 1`] = `
Array [
  "entry1
",
  "entry2
",
]
`;

exports[`/svelte.js should warn about unquoted class attributes 1`] = `
Array [
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unquoted class attribute! class={css.b}",
    "packages/svelte/test/specimens/unquoted.svelte",
  ],
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unquoted class attribute! class={css.a}",
    "packages/svelte/test/specimens/unquoted.svelte",
  ],
]
`;

exports[`/svelte.js should warn when multiple <link> elements are in the html 1`] = `
"<link rel=\\"stylesheet\\" href=\\"./simple2.css\\" />

<div class=\\"mc_fooga\\">fooga</div>
<div class=\\"{\\"css.booga\\"}\\">booga</div>
<script>import css from \\"./simple.css\\";</script>"
`;

exports[`/svelte.js should warn when multiple <link> elements are in the html 2`] = `
"/* packages/svelte/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
"
`;

exports[`/svelte.js should warn when multiple <link> elements are in the html 3`] = `
Array [
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Only the first local <link> tag will be used",
    "packages/svelte/test/specimens/multiple-link.svelte",
  ],
  Array [
    "[@modular-css/svelte]",
    "WARN",
    "Unable to find .booga in ./simple.css",
  ],
]
`;
