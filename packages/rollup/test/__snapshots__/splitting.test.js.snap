// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/rollup.js code splitting should correctly chunk up CSS files 1`] = `
Object {
  "assets/a.css": "
/* packages/rollup/test/specimens/css-dependencies/a.css */
.a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup/test/specimens/css-dependencies/b.css */
.b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup/test/specimens/css-dependencies/c.css */
.c {
    color: cyan;
}
",
}
`;

exports[`/rollup.js code splitting should dedupe chunk names using rollup's incrementing counter logic (hashed) 1`] = `
Object {
  "assets/a-890c0aa5.css": "
/* packages/rollup/test/specimens/multiple-chunks/a.css */
.a {
    color: aqua;
}
",
  "assets/a-a56cc35c.css": "
/* packages/rollup/test/specimens/multiple-chunks/subfolder/a.css */
.a { color: azure; }",
  "assets/b-097f3a93.css": "
/* packages/rollup/test/specimens/multiple-chunks/b.css */
.b {
    color: blue;
}
",
}
`;

exports[`/rollup.js code splitting should dedupe chunk names using rollup's incrementing counter logic 1`] = `
Object {
  "assets/a.css": "
/* packages/rollup/test/specimens/multiple-chunks/a.css */
.a {
    color: aqua;
}
",
  "assets/a2.css": "
/* packages/rollup/test/specimens/multiple-chunks/subfolder/a.css */
.a { color: azure; }",
  "assets/b.css": "
/* packages/rollup/test/specimens/multiple-chunks/b.css */
.b {
    color: blue;
}
",
}
`;

exports[`/rollup.js code splitting should output metadata successfully when unreferenced CSS is output to common 1`] = `
Object {
  "assets/a.css": "
/* packages/rollup/test/specimens/metadata/a.css */
.mc541d3f5c_a { color: aqua; }
",
  "assets/b.css": "
/* packages/rollup/test/specimens/metadata/b.css */
.mc04101138_b { color: blue; }
",
  "assets/d.css": "
/* packages/rollup/test/specimens/metadata/d.css */
.mc7de0d66b_d { color: darkkhaki; }
",
  "assets/fake.css": "
/* fake.css */
.mc2c838439_fake { color: red; }",
  "assets/metadata.json": "
{
    \\"a.js\\": {
        \\"assets\\": [
            \\"assets/a.css\\"
        ]
    },
    \\"b.js\\": {
        \\"assets\\": [
            \\"assets/b.css\\"
        ]
    },
    \\"d.js\\": {
        \\"assets\\": [
            \\"assets/d.css\\"
        ]
    }
}",
}
`;

exports[`/rollup.js code splitting should output only 1 JSON file 1`] = `
Object {
  "assets/dependencies.css": "
/* packages/rollup/test/specimens/dependencies.css */
.wooga {
    background: blue;
}
",
  "assets/exports.json": "
{
    \\"packages/rollup/test/specimens/dependencies.css\\": {
        \\"wooga\\": [
            \\"fooga\\",
            \\"wooga\\"
        ]
    },
    \\"packages/rollup/test/specimens/simple.css\\": {
        \\"fooga\\": [
            \\"fooga\\"
        ]
    }
}",
  "assets/simple.css": "
/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}
",
}
`;

exports[`/rollup.js code splitting should support circular JS dependencies 1`] = `
Object {
  "a.js": "
export { a as default } from './a2.js';
",
  "a2.js": "
const b = \\"b\\";
var css = {
    \\"b\\" : b
};

console.log(css, a$1);

var b$1 = \\"b\\";

const a = \\"a\\";
var css$1 = {
    \\"a\\" : a
};

console.log(css$1, b$1);

var a$1 = \\"a\\";

export { a$1 as a, b$1 as b };
",
  "assets/a.css": "
/* packages/rollup/test/specimens/circular-dependencies/b.css */
.b { color: blue; }
/* packages/rollup/test/specimens/circular-dependencies/a.css */
.a { color: aqua; }
",
  "b.js": "
export { b as default } from './a2.js';
",
}
`;

exports[`/rollup.js code splitting should support dynamic imports 1`] = `
Object {
  "assets/a.css": "
/* packages/rollup/test/specimens/dynamic-imports/a.css */
.a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup/test/specimens/dynamic-imports/e.css */
.e {
    color: #EEE;
}
/* packages/rollup/test/specimens/dynamic-imports/b.css */
.b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup/test/specimens/dynamic-imports/c.css */
.c {
    color: cyan;
}
",
  "assets/d.css": "
/* packages/rollup/test/specimens/dynamic-imports/f.css */
.f {
    color: floralwhite;
}
/* packages/rollup/test/specimens/dynamic-imports/d.css */
.d {
    color: darkred;
}
",
}
`;

exports[`/rollup.js code splitting should support manual chunks 1`] = `
Object {
  "assets/a.css": "
/* packages/rollup/test/specimens/manual-chunks/a.css */
.a {
    color: red;
}
",
  "assets/b.css": "
/* packages/rollup/test/specimens/manual-chunks/b.css */
.b {
    color: blue;
}
",
  "assets/d.css": "
/* packages/rollup/test/specimens/manual-chunks/d.css */
",
  "assets/shared.css": "
/* packages/rollup/test/specimens/manual-chunks/c.css */
.c {
    color: green;
    background: darkred;
}
",
}
`;

exports[`/rollup.js code splitting should support outputting metadata about CSS dependencies 1`] = `
Object {
  "assets/a.css": "
/* packages/rollup/test/specimens/metadata/a.css */
.a { color: aqua; }
",
  "assets/b.css": "
/* packages/rollup/test/specimens/metadata/b.css */
.b { color: blue; }
",
  "assets/d.css": "
/* packages/rollup/test/specimens/metadata/d.css */
.d { color: darkkhaki; }
",
  "assets/metadata.json": "
{
    \\"a.js\\": {
        \\"assets\\": [
            \\"assets/a.css\\"
        ]
    },
    \\"b.js\\": {
        \\"assets\\": [
            \\"assets/b.css\\"
        ]
    },
    \\"d.js\\": {
        \\"assets\\": [
            \\"assets/d.css\\"
        ]
    }
}",
}
`;

exports[`/rollup.js code splitting should support outputting metadata about CSS dependencies to a named file  1`] = `
Object {
  "assets/a.css": "
/* packages/rollup/test/specimens/metadata/a.css */
.a { color: aqua; }
",
  "assets/b.css": "
/* packages/rollup/test/specimens/metadata/b.css */
.b { color: blue; }
",
  "assets/chunks.json": "
{
    \\"a.js\\": {
        \\"assets\\": [
            \\"assets/a.css\\"
        ]
    },
    \\"b.js\\": {
        \\"assets\\": [
            \\"assets/b.css\\"
        ]
    },
    \\"d.js\\": {
        \\"assets\\": [
            \\"assets/d.css\\"
        ]
    }
}",
  "assets/d.css": "
/* packages/rollup/test/specimens/metadata/d.css */
.d { color: darkkhaki; }
",
}
`;

exports[`/rollup.js code splitting should support splitting up CSS files 1`] = `
Object {
  "assets/dependencies.css": "
/* packages/rollup/test/specimens/dependencies.css */
.wooga {
    background: blue;
}
",
  "assets/simple.css": "
/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}
",
}
`;

exports[`/rollup.js code splitting should support splitting up CSS files w/ shared assets 1`] = `
Object {
  "assets/a.css": "
/* packages/rollup/test/specimens/css-chunks/a.css */
.a {
    color: aqua;
}
",
  "assets/b.css": "
/* packages/rollup/test/specimens/css-chunks/b.css */
.b {
    color: blue;
}
",
  "assets/c.css": "
/* packages/rollup/test/specimens/css-chunks/shared.css */
.shared {
    color: snow;
}
/* packages/rollup/test/specimens/css-chunks/c.css */
.c {
    color: cyan;
}
",
}
`;

exports[`/rollup.js code splitting shouldn't break when dynamic imports are tree-shaken away (rollup/rollup#2659) 1`] = `Object {}`;

exports[`/rollup.js code splitting shouldn't put bundle-specific CSS in common.css 1`] = `
Object {
  "assets/a.css": "
/* packages/rollup/test/specimens/common-splitting/shared.css */
.shared {
    color: snow;
}
/* packages/rollup/test/specimens/common-splitting/a.css */
.a {
    color: aqua;
}
.a2 {
    color: azure;
}
/* packages/rollup/test/specimens/common-splitting/shared3.css */
.shared3 {
    color: saddlebrown;
}
/* packages/rollup/test/specimens/common-splitting/b.css */
.b {
    color: blue;
}
.b2 {
    color: blanchedalmond;
}
",
  "assets/c.css": "
/* packages/rollup/test/specimens/common-splitting/c.css */
.c {
    color: cyan;
}

.c2 {
    color: crimson;
}",
  "assets/shared2.css": "
/* packages/rollup/test/specimens/common-splitting/shared2.css */
.shared2 {
    color: sandybrown;
}
",
}
`;

exports[`/rollup.js code splitting shouldn't use entry hashes as part of the CSS file names 1`] = `
Object {
  "assets/simple-8ed43a0c.css": "
/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}
",
  "simple.ffd25c97.js": "
const fooga = \\"fooga\\";
var css = {
    \\"fooga\\" : fooga
};

console.log(css);
",
}
`;
