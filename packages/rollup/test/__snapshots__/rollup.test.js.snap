// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/rollup.js Exports option should generate valid composition output when global() is used 1`] = `
{
  "entry": "
const out = "foo" + " " + "mc_out";
var style = {
    out
};

console.log(style);
",
}
`;

exports[`/rollup.js Exports option should generated valid JS even when identifiers aren't 1`] = `
{
  "entry": "
const fooBar = "mc_foo-bar";

const out = fooBar + " " + "mc_out";
var style = {
    out
};

console.log(style);
",
}
`;

exports[`/rollup.js Exports option should provide named exports by default 1`] = `
{
  "named": "
const a = "mc_a";

console.log(a);
",
}
`;

exports[`/rollup.js Exports option should warn & ignore invalid identifiers (namedExports.rewriteInvalid = false) 1`] = `
{
  "code": "PLUGIN_WARNING",
  "hook": "transform",
  "id": Any<String>,
  "message": ""fooga-wooga" is not a valid JS identifier",
  "plugin": "@modular-css/rollup",
}
`;

exports[`/rollup.js Exports option should warn & ignore invalid identifiers (namedExports.rewriteInvalid = false) 2`] = `
{
  "invalid-name": "
const fooga = "mc_fooga";
const foogaWooga = "mc_fooga-wooga";
var css = {
    fooga,
"fooga-wooga" : foogaWooga
};

console.log(css, fooga);
",
}
`;

exports[`/rollup.js Exports option should warn & rewrite invalid identifiers (namedExports.rewriteInvalid = true) 1`] = `
{
  "code": "PLUGIN_WARNING",
  "hook": "transform",
  "id": Any<String>,
  "message": ""fooga-wooga" is not a valid JS identifier, exported as "foogaWooga"",
  "plugin": "@modular-css/rollup",
}
`;

exports[`/rollup.js Exports option should warn & rewrite invalid identifiers (namedExports.rewriteInvalid = true) 2`] = `
{
  "invalid-name": "
const fooga = "mc_fooga";
const foogaWooga = "mc_fooga-wooga";
var css = {
    fooga,
"fooga-wooga" : foogaWooga
};

console.log(css, fooga);
",
}
`;

exports[`/rollup.js Exports option should warn if named exports are falsey 1`] = `
[
  [
    "(@modular-css/rollup plugin) @modular-css/rollup doesn't allow namedExports to be disabled",
  ],
]
`;

exports[`/rollup.js dev mode option should output a proxy 1`] = `
{
  "simple": "
const str = "\\"string\\"";
const $values = {
    str,
};
const fooga = "mc_fooga";
const data = {
    $values,
fooga
};

var css = new Proxy(data, {
    get(tgt, key) {
        if(key in tgt) {
            return tgt[key];
        }

        throw new ReferenceError(
            key + " is not exported by " + "packages/rollup/test/specimens/simple.css"
        );
    }
});

console.log(css);
",
}
`;

exports[`/rollup.js empties option should not write out empty CSS files by default 1`] = `{}`;

exports[`/rollup.js empties option should write out empty CSS files when empties is enabled 1`] = `
{
  "assets/empty.css": "
",
}
`;

exports[`/rollup.js json option should generate JSON 1`] = `
{
  "assets/exports.json": "
{
    "packages/rollup/test/specimens/simple.css": {
        "str": "\\"string\\"",
        "fooga": "mc_fooga"
    }
}",
  "assets/simple.css": "
/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
",
}
`;

exports[`/rollup.js json option should generate JSON with a custom name 1`] = `
{
  "assets/simple.css": "
/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
",
  "custom.json": "
{
    "packages/rollup/test/specimens/simple.css": {
        "str": "\\"string\\"",
        "fooga": "mc_fooga"
    }
}",
}
`;

exports[`/rollup.js processor option should accept an existing processor instance (no css in bundle) 1`] = `
{
  "assets/fake.css": "
/* packages/rollup/test/specimens/fake.css */
.mc_fake {
    color: yellow;
}",
}
`;

exports[`/rollup.js processor option should accept an existing processor instance 1`] = `
{
  "assets/fake.css": "
/* packages/rollup/test/specimens/fake.css */
.mc_fake {
    color: yellow;
}",
  "assets/simple.css": "
/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
",
}
`;

exports[`/rollup.js should avoid generating empty CSS 1`] = `{}`;

exports[`/rollup.js should be able to tree-shake results 1`] = `
{
  "tree-shaking": "
const fooga = "mc_fooga";

console.log(fooga);
",
}
`;

exports[`/rollup.js should correctly handle hashed output 1`] = `
{
  "assets/simple-70VV22SP.css": "
/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
",
  "simple.js": "
const str = "\\"string\\"";
const $values = {
    str,
};
const fooga = "mc_fooga";
var css = {
    $values,
fooga
};

console.log(css);
",
}
`;

exports[`/rollup.js should correctly handle hashed output with external source maps & json files 1`] = `
{
  "assets/exports-P40iZL_X.json": "
{
    "packages/rollup/test/specimens/simple.css": {
        "str": "\\"string\\"",
        "fooga": "mc_fooga"
    }
}",
  "assets/simple-70VV22SP.css": "
/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}

/*# sourceMappingURL=simple-70VV22SP.css.map */",
  "assets/simple-70VV22SP.css.map": "
{"version":3,"sources":["../packages/rollup/test/specimens/simple.css"],"names":[],"mappings":"AAAA,8CAAA;AAEA;IACI,UAAU;AACd","file":"simple-[hash].css","sourcesContent":["@value str: \\"string\\";\\n\\n.fooga {\\n    color: red;\\n}\\n"]}",
  "simple.js": "
const str = "\\"string\\"";
const $values = {
    str,
};
const fooga = "mc_fooga";
var css = {
    $values,
fooga
};

console.log(css);
",
}
`;

exports[`/rollup.js should correctly pass to/from params for relative paths 1`] = `
{
  "assets/relative-paths.css": "
/* packages/rollup/test/specimens/relative-paths.css */
.mc_wooga {
    color: red;
    background: url("../../../specimens/folder/to.png");
}
",
}
`;

exports[`/rollup.js should express layers of locally-composed classes correctly 1`] = `
{
  "assets/composition-layers.css": "
/* packages/rollup/test/specimens/composition-layers/composition-layers.css */
.mc_a {
    color: red;
}

.mc_b {
    color: blue;
}

.mc_c {
    color: green;
}",
  "composition-layers.js": "
const a = "mc_a";
const b = a + " " + "mc_b";
const c = b + " " + "mc_c";
var css = {
    a,
b,
c
};

console.log(css);
",
}
`;

exports[`/rollup.js should express local & remote-composed classes correctly 1`] = `
{
  "assets/internal-external-composition.css": "
/* packages/rollup/test/specimens/internal-external-composition/other.css */
.mc_other {
    color: green;
}
/* packages/rollup/test/specimens/internal-external-composition/internal-external-composition.css */
.mc_one {
    color: red;
}
.mc_two {
    background: blue;
}",
  "internal-external-composition.js": "
const other = "mc_other";

const one = "mc_one";
const two = other + " " + one + " " + "mc_two";
var css = {
    one,
two
};

console.log(css);
",
}
`;

exports[`/rollup.js should express locally-composed classes correctly 1`] = `
{
  "assets/local-composition.css": "
/* packages/rollup/test/specimens/local-composition.css */
.mc_one {
    color: red;
}

.mc_two {
    background: blue;
}
",
  "local-composition.js": "
const one = "mc_one";
const two = one + " " + "mc_two";
var css = {
    one,
two
};

console.log(css);
",
}
`;

exports[`/rollup.js should generate CSS 1`] = `
{
  "assets/simple.css": "
/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
",
}
`;

exports[`/rollup.js should generate exports 1`] = `
{
  "simple": "
const str = "\\"string\\"";
const $values = {
    str,
};
const fooga = "mc_fooga";
var css = {
    $values,
fooga
};

console.log(css);
",
}
`;

exports[`/rollup.js should handle assetFileNames being undefined 1`] = `
{
  "assets/simple-70VV22SP.css": "
/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
",
}
`;

exports[`/rollup.js should ignore external modules 1`] = `{}`;

exports[`/rollup.js should output assets with a .css file extension 1`] = `
{
  "assets/entry.css": "
/* packages/rollup/test/specimens/file-extension/style.cssx */
.mc_style {
    color: salmon;
}
",
  "entry.js": "
const style = "mc_style";
var style$1 = {
    style
};

console.log(style$1);
",
}
`;

exports[`/rollup.js should output classes in topological order 1`] = `
{
  "assets/topological-order.css": "
/* packages/rollup/test/specimens/topological-order/topological-order.css */
.mc_b {
    border: 1px solid red;
}

.mc_a {
    background: blue;
}
",
  "topological-order.js": "
const b = "mc_b";
const a = b + " " + "mc_a";
var css = {
    b,
a
};

console.log(css);
",
}
`;

exports[`/rollup.js should output unreferenced CSS 1`] = `
{
  "assets/fake.css": "
/* packages/rollup/test/specimens/fake.css */
.mc_fake {
    color: yellow;
}",
  "assets/simple.css": "
/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
",
}
`;

exports[`/rollup.js should respect the CSS dependency tree 1`] = `
{
  "assets/dependencies.css": "
/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
/* packages/rollup/test/specimens/dependencies.css */
.mc_wooga {
    background: blue;
}
",
  "dependencies.js": "
const fooga = "mc_fooga";

const wooga = fooga + " " + "mc_wooga";
var css = {
    wooga
};

console.log(css);
",
}
`;

exports[`/rollup.js should support @value and class overlap 1`] = `
{
  "assets/class-value-overlap.css": "
/* packages/rollup/test/specimens/class-value-overlap/class-value-overlap.css */
.mc_foo { color: blue; }",
  "class-value-overlap.js": "
const foo = "blue";
const $values = {
    foo,
};
const foo1 = "mc_foo";
var css = {
    $values,
"foo" : foo1
};

console.log(css);
",
}
`;

exports[`/rollup.js should support @value camelCase overlap 1`] = `
{
  "assets/value-camel-overlap.css": "
/* packages/rollup/test/specimens/value-camel-overlap.css */
",
  "value-camel-overlap.js": "
const colorBlack = "#000";
const colorBlack1 = "#000";
const $values = {
    colorBlack,
"color-black" : colorBlack1,
};
var css = {
    $values
};

console.log(css);
",
}
`;

exports[`/rollup.js should support external @value aliases 1`] = `
{
  "assets/external-value-aliasing.css": "
/* packages/rollup/test/specimens/external-value-aliasing/source.css */
/* packages/rollup/test/specimens/external-value-aliasing/intermediate.css */
/* packages/rollup/test/specimens/external-value-aliasing/external-value-aliasing.css */
.mc_aliased {
    color: red;
    background: blue;
}
",
  "external-value-aliasing.js": "
const a = "red";
const b = "blue";
const $values$2 = {
    a,
b,
};

const $values$1 = {
    "a" : $values$2["a"],
"b" : $values$2["b"],
};

const $values = {
    "a" : $values$1["a"],
"b" : $values$1["b"],
};
const aliased = "mc_aliased";
var css = {
    $values,
aliased
};

console.log(css);
",
}
`;

exports[`/rollup.js should support mixing all @value types 1`] = `
{
  "all-value-types.js": "
const color = "red";
const other = "blue";
const $values$2 = {
    color,
other,
};

const background = "green";
const $values$1 = {
    background,
};

const border = "1px solid black";
const $values = {
    "ns" : $values$2,
"background" : $values$1["background"],
border,
};
const namespaced = "mc_namespaced";
var css = {
    $values,
namespaced
};

console.log(css);
",
  "assets/all-value-types.css": "
/* packages/rollup/test/specimens/all-value-types/values1.css */
/* packages/rollup/test/specimens/all-value-types/values2.css */
/* packages/rollup/test/specimens/all-value-types/all-value-types.css */
.mc_namespaced {
    color: red;
    background: green;
    border: 1px solid black;
}",
}
`;

exports[`/rollup.js should support multiple selectors 1`] = `
{
  "assets/multi-selector.css": "
/* packages/rollup/test/specimens/multi-selector/other.css */
.mc_other,
.mc_other:visited {
    color: red;
}
/* packages/rollup/test/specimens/multi-selector/multi-selector.css */",
  "multi-selector.js": "
const other = "mc_other";

const ms = other + " " + "mc_ms";
var css = {
    ms
};

console.log(css);
",
}
`;

exports[`/rollup.js should support namespaced @value imports 1`] = `
{
  "assets/namespaced.css": "
/* packages/rollup/test/specimens/namespaced/values.css */
/* packages/rollup/test/specimens/namespaced/namespaced.css */
.mc_namespaced {
    color: red;
}",
  "namespaced.js": "
const color = "red";
const other = "blue";
const $values$1 = {
    color,
other,
};

const $values = {
    "ns" : $values$1,
};
const namespaced = "mc_namespaced";
var css = {
    $values,
namespaced
};

console.log(css);
",
}
`;

exports[`/rollup.js source maps should generate external source maps 1`] = `
{
  "file": Any<String>,
  "mappings": "AAAA,8CAAA;AAEA;IACI,UAAU;AACd",
  "names": [],
  "sources": [
    "../../../specimens/simple.css",
  ],
  "sourcesContent": [
    "@value str: "string";

.fooga {
    color: red;
}
",
  ],
  "version": 3,
}
`;

exports[`/rollup.js source maps should generate external source maps 2`] = `
"/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}

/*# sourceMappingURL=simple.css.map */"
`;

exports[`/rollup.js source maps should not output sourcemaps when they are disabled 1`] = `
{
  "assets/simple.css": "
/* packages/rollup/test/specimens/simple.css */
.mc_fooga {
    color: red;
}
",
}
`;

exports[`/rollup.js source maps shouldn't disable sourcemap generation 1`] = `
SourceMap {
  "file": "simple.js",
  "mappings": ";;;;;;;;;;AAEA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC",
  "names": [],
  "sources": [
    "packages/rollup/test/specimens/simple.js",
  ],
  "sourcesContent": [
    "import css from "./simple.css";

console.log(css);
",
  ],
  "version": 3,
}
`;

exports[`/rollup.js styleExport option should provide style export 1`] = `
{
  "style-export": "
const styles = ".mc_ooh {\\n    content: \\"string\\";\\n}\\n";

console.log(styles);
",
}
`;

exports[`/rollup.js styleExport option should warn that styleExport and done aren't compatible 1`] = `
[
  [
    "(@modular-css/rollup plugin) Any plugins defined during the "done" lifecycle won't run when "styleExport" is set!",
  ],
]
`;

exports[`/rollup.js verbose option should log in verbose mode 1`] = `
[
  [
    "[rollup]",
    "build start",
  ],
  [
    "[rollup]",
    "transform",
    "packages/rollup/test/specimens/simple.css",
  ],
  [
    "[processor]",
    "string()",
    "packages/rollup/test/specimens/simple.css",
  ],
  [
    "[processor]",
    "_add()",
    "packages/rollup/test/specimens/simple.css",
  ],
  [
    "[processor]",
    "_before()",
    "packages/rollup/test/specimens/simple.css",
  ],
  [
    "[processor]",
    "_process()",
    "packages/rollup/test/specimens/simple.css",
  ],
  [
    "[processor]",
    "_after()",
    "packages/rollup/test/specimens/simple.css",
  ],
  [
    "[rollup]",
    "css output",
    "assets/simple.css",
  ],
  [
    "[processor]",
    "file()",
    "packages/processor/test/specimens/start.css",
  ],
  [
    "[processor]",
    "_add()",
    "packages/processor/test/specimens/start.css",
  ],
  [
    "[processor]",
    "_before()",
    "packages/processor/test/specimens/start.css",
  ],
  [
    "[processor]",
    "file()",
    "packages/processor/test/specimens/local.css",
  ],
  [
    "[processor]",
    "_add()",
    "packages/processor/test/specimens/local.css",
  ],
  [
    "[processor]",
    "_before()",
    "packages/processor/test/specimens/local.css",
  ],
  [
    "[processor]",
    "file()",
    "packages/processor/test/specimens/folder/folder.css",
  ],
  [
    "[processor]",
    "_add()",
    "packages/processor/test/specimens/folder/folder.css",
  ],
  [
    "[processor]",
    "_before()",
    "packages/processor/test/specimens/folder/folder.css",
  ],
  [
    "[processor]",
    "_process()",
    "packages/processor/test/specimens/folder/folder.css",
  ],
  [
    "[processor]",
    "_process()",
    "packages/processor/test/specimens/local.css",
  ],
  [
    "[processor]",
    "_process()",
    "packages/processor/test/specimens/start.css",
  ],
  [
    "[processor]",
    "string()",
    "packages/processor/test/specimens/string.css",
  ],
  [
    "[processor]",
    "_add()",
    "packages/processor/test/specimens/string.css",
  ],
  [
    "[processor]",
    "_before()",
    "packages/processor/test/specimens/string.css",
  ],
  [
    "[processor]",
    "_process()",
    "packages/processor/test/specimens/string.css",
  ],
  [
    "[processor]",
    "_after()",
    "packages/processor/test/specimens/string.css",
  ],
  [
    "[processor]",
    "_after()",
    "packages/processor/test/specimens/folder/folder.css",
  ],
  [
    "[processor]",
    "_after()",
    "packages/processor/test/specimens/local.css",
  ],
  [
    "[processor]",
    "_after()",
    "packages/processor/test/specimens/start.css",
  ],
]
`;
