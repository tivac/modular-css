// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/rollup.js should accept an existing processor instance (no css in bundle) 1`] = `
Object {
  "assets/fake.css": "
/* packages/rollup/test/specimens/fake.css */
.fake {
    color: yellow;
}",
}
`;

exports[`/rollup.js should accept an existing processor instance 1`] = `
Object {
  "assets/fake.css": "
/* packages/rollup/test/specimens/fake.css */
.fake {
    color: yellow;
}",
  "assets/simple.css": "
/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}
",
}
`;

exports[`/rollup.js should allow disabling of named exports 1`] = `
Object {
  "simple": "
const str = \\"\\\\\\"string\\\\\\"\\";
const fooga = \\"fooga\\";
var css = {
    \\"str\\" : str,
\\"fooga\\" : fooga
};

console.log(css);
",
}
`;

exports[`/rollup.js should be able to tree-shake results 1`] = `
Object {
  "tree-shaking": "
const fooga = \\"fooga\\";

console.log(fooga);
",
}
`;

exports[`/rollup.js should correctly handle hashed output 1`] = `
Object {
  "assets/simple-8ed43a0c.css": "
/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}
",
  "hashes.js": "
const str = \\"\\\\\\"string\\\\\\"\\";
const fooga = \\"fooga\\";
var css = {
    \\"str\\" : str,
\\"fooga\\" : fooga
};

console.log(css);
",
}
`;

exports[`/rollup.js should correctly handle hashed output with external source maps & json files 1`] = `
Object {
  "assets/exports-2733b4a4.json": "
{
    \\"packages/rollup/test/specimens/simple.css\\": {
        \\"str\\": \\"\\\\\\"string\\\\\\"\\",
        \\"fooga\\": \\"fooga\\"
    }
}",
  "assets/simple-8ed43a0c.css": "
/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}

/*# sourceMappingURL=simple-8ed43a0c.css.map */",
  "assets/simple-8ed43a0c.css.map": "
{\\"version\\":3,\\"sources\\":[\\"../../../specimens/simple.css\\"],\\"names\\":[],\\"mappings\\":\\"AAAA,8CAAA;AAEA;IACI,UAAU;AACd\\",\\"file\\":\\"simple-[hash].css\\",\\"sourcesContent\\":[\\"@value str: \\\\\\"string\\\\\\";\\\\n\\\\n.fooga {\\\\n    color: red;\\\\n}\\\\n\\"]}",
  "hashes.js": "
const str = \\"\\\\\\"string\\\\\\"\\";
const fooga = \\"fooga\\";
var css = {
    \\"str\\" : str,
\\"fooga\\" : fooga
};

console.log(css);
",
}
`;

exports[`/rollup.js should correctly pass to/from params for relative paths 1`] = `
"/* packages/rollup/test/specimens/relative-paths.css */
.wooga {
    color: red;
    background: url(\\"../../../specimens/folder/to.png\\");
}
"
`;

exports[`/rollup.js should generate CSS 1`] = `
"/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}
"
`;

exports[`/rollup.js should generate JSON 1`] = `
"{
    \\"packages/rollup/test/specimens/simple.css\\": {
        \\"str\\": \\"\\\\\\"string\\\\\\"\\",
        \\"fooga\\": \\"fooga\\"
    }
}"
`;

exports[`/rollup.js should generate JSON with a custom name 1`] = `
"{
    \\"packages/rollup/test/specimens/simple.css\\": {
        \\"str\\": \\"\\\\\\"string\\\\\\"\\",
        \\"fooga\\": \\"fooga\\"
    }
}"
`;

exports[`/rollup.js should generate exports 1`] = `
Object {
  "simple": "
const str = \\"\\\\\\"string\\\\\\"\\";
const fooga = \\"fooga\\";
var css = {
    \\"str\\" : str,
\\"fooga\\" : fooga
};

console.log(css);
",
}
`;

exports[`/rollup.js should generate external source maps 1`] = `
Object {
  "file": Any<String>,
  "mappings": "AAAA,8CAAA;AAEA;IACI,UAAU;AACd",
  "names": Array [],
  "sources": Array [
    "../../../specimens/simple.css",
  ],
  "sourcesContent": Array [
    "@value str: \\"string\\";

.fooga {
    color: red;
}
",
  ],
  "version": 3,
}
`;

exports[`/rollup.js should generate external source maps 2`] = `
"/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}

/*# sourceMappingURL=simple.css.map */"
`;

exports[`/rollup.js should handle assetFileNames being undefined 1`] = `
"/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}
"
`;

exports[`/rollup.js should log in verbose mode 1`] = `
Array [
  Array [
    "[rollup]",
    "build start",
  ],
  Array [
    "[rollup]",
    "transform",
    "packages/rollup/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "string()",
    "packages/rollup/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/rollup/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/rollup/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/rollup/test/specimens/simple.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/rollup/test/specimens/simple.css",
  ],
  Array [
    "[rollup]",
    "css output",
    "assets/simple.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/processor/test/specimens/start.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/processor/test/specimens/start.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/processor/test/specimens/start.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/processor/test/specimens/local.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/processor/test/specimens/local.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/processor/test/specimens/local.css",
  ],
  Array [
    "[processor]",
    "file()",
    "packages/processor/test/specimens/folder/folder.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/processor/test/specimens/folder/folder.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/processor/test/specimens/folder/folder.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/processor/test/specimens/folder/folder.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/processor/test/specimens/local.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/processor/test/specimens/start.css",
  ],
  Array [
    "[processor]",
    "string()",
    "packages/processor/test/specimens/string.css",
  ],
  Array [
    "[processor]",
    "_add()",
    "packages/processor/test/specimens/string.css",
  ],
  Array [
    "[processor]",
    "_before()",
    "packages/processor/test/specimens/string.css",
  ],
  Array [
    "[processor]",
    "_process()",
    "packages/processor/test/specimens/string.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/processor/test/specimens/folder/folder.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/processor/test/specimens/string.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/processor/test/specimens/local.css",
  ],
  Array [
    "[processor]",
    "_after()",
    "packages/processor/test/specimens/start.css",
  ],
]
`;

exports[`/rollup.js should not output sourcemaps when they are disabled 1`] = `
"/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}
"
`;

exports[`/rollup.js should output a proxy in dev mode 1`] = `
Object {
  "simple": "
const str = \\"\\\\\\"string\\\\\\"\\";
const fooga = \\"fooga\\";
const data = {
    \\"str\\" : str,
\\"fooga\\" : fooga
};

var css = new Proxy(data, {
    get(tgt, key) {
        if(key in tgt) {
            return tgt[key];
        }

        throw new ReferenceError(
            key + \\" is not exported by \\" + \\"packages/rollup/test/specimens/simple.css\\"
        );
    }
});

console.log(css);
",
}
`;

exports[`/rollup.js should output assets with a .css file extension 1`] = `
Object {
  "assets/entry.css": "
/* packages/rollup/test/specimens/file-extension/style.cssx */
.style {
    color: salmon;
}
",
  "entry.js": "
const style = \\"style\\";
var style$1 = {
    \\"style\\" : style
};

console.log(style$1);
",
}
`;

exports[`/rollup.js should output unreferenced CSS 1`] = `
Object {
  "assets/fake.css": "
/* packages/rollup/test/specimens/fake.css */
.fake {
    color: yellow;
}",
  "assets/simple.css": "
/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}
",
}
`;

exports[`/rollup.js should provide named exports 1`] = `
Object {
  "named": "
const str = \\"\\\\\\"string\\\\\\"\\";
const num = \\"10\\";
const dim = \\"10px\\";
const mix = \\"1px solid red\\";
const a = \\"a\\";

console.log(a, str, num, dim, mix);
",
}
`;

exports[`/rollup.js should provide style export 1`] = `
Object {
  "style-export": "
var styles = \\".ooh {\\\\n    content: \\\\\\"string\\\\\\";\\\\n}\\\\n\\";

console.log(styles);
",
}
`;

exports[`/rollup.js should respect the CSS dependency tree 1`] = `
"const fooga = \\"fooga\\";

const wooga = fooga + \\" \\" + \\"wooga\\";
var css = {
    \\"wooga\\" : wooga
};

console.log(css);
"
`;

exports[`/rollup.js should respect the CSS dependency tree 2`] = `
"/* packages/rollup/test/specimens/simple.css */
.fooga {
    color: red;
}
/* packages/rollup/test/specimens/dependencies.css */
.wooga {
    background: blue;
}
"
`;

exports[`/rollup.js should warn & not export individual keys when they are not valid identifiers 1`] = `
Object {
  "code": "PLUGIN_WARNING",
  "hook": "transform",
  "id": Any<String>,
  "message": "Invalid JS identifier \\"fooga-wooga\\", unable to export",
  "plugin": "@modular-css/rollup",
  "toString": [Function],
}
`;

exports[`/rollup.js should warn & not export individual keys when they are not valid identifiers 2`] = `
Object {
  "invalid-name": "
var css = {
    \\"fooga\\": \\"fooga\\",
    \\"fooga-wooga\\": \\"fooga-wooga\\"
};
var fooga = \\"fooga\\";

console.log(css, fooga);
",
}
`;

exports[`/rollup.js should warn that styleExport and done aren't compatible 1`] = `
Array [
  Array [
    "Any plugins defined during the \\"done\\" lifecycle won't run when \\"styleExport\\" is set!",
  ],
]
`;

exports[`/rollup.js should write out empty CSS files when empties is enabled 1`] = `""`;

exports[`/rollup.js shouldn't disable sourcemap generation 1`] = `
SourceMap {
  "file": "simple.js",
  "mappings": ";;;;;;;AAEA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC",
  "names": Array [],
  "sources": Array [
    "packages/rollup/test/specimens/simple.js",
  ],
  "sourcesContent": Array [
    "import css from \\"./simple.css\\";

console.log(css);
",
  ],
  "version": 3,
}
`;
