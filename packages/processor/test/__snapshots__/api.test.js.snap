// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/processor.js API .compositions should return compositions for loaded files 1`] = `Promise {}`;

exports[`/processor.js API .dependencies() should return the dependencies of the specified file 1`] = `
Array [
  "packages/processor/test/specimens/folder/folder.css",
  "packages/processor/test/specimens/local.css",
]
`;

exports[`/processor.js API .dependencies() should return the overall order of dependencies if no file is specified 1`] = `
Array [
  "packages/processor/test/specimens/folder/folder.css",
  "packages/processor/test/specimens/local.css",
  "packages/processor/test/specimens/start.css",
]
`;

exports[`/processor.js API .file() should process a relative file 1`] = `
Object {
  "wooga": Array [
    "mc_wooga",
  ],
}
`;

exports[`/processor.js API .file() should process a relative file 2`] = `
Object {
  "wooga": Array [
    "mc_wooga",
  ],
}
`;

exports[`/processor.js API .file() should process a relative file 3`] = `
".mc_wooga { color: red; }
"
`;

exports[`/processor.js API .file() should process an absolute file 1`] = `
Object {
  "wooga": Array [
    "mc_wooga",
  ],
}
`;

exports[`/processor.js API .file() should process an absolute file 2`] = `
Object {
  "wooga": Array [
    "mc_wooga",
  ],
}
`;

exports[`/processor.js API .file() should process an absolute file 3`] = `
".mc_wooga { color: red; }
"
`;

exports[`/processor.js API .file() should wait for dependencies to be processed before composing 1`] = `
Array [
  Object {
    "one": Array [
      "mc_three",
      "mc_two",
      "mc_one",
      "mc_one",
    ],
  },
  Object {
    "two": Array [
      "mc_three",
      "mc_two",
      "mc_one",
      "mc_two",
    ],
  },
]
`;

exports[`/processor.js API .invalidate() should invalidate a relative file 1`] = `
Array [
  Array [
    "simple.css",
    false,
  ],
]
`;

exports[`/processor.js API .invalidate() should invalidate all dependents as well 1`] = `
Array [
  Array [
    "packages/processor/test/specimens/start.css",
    false,
  ],
  Array [
    "packages/processor/test/specimens/local.css",
    false,
  ],
  Array [
    "packages/processor/test/specimens/folder/folder.css",
    false,
  ],
]
`;

exports[`/processor.js API .invalidate() should invalidate an absolute file 1`] = `
Array [
  Array [
    "packages/processor/test/specimens/simple.css",
    false,
  ],
]
`;

exports[`/processor.js API .invalidate() should reprocess invalidated files 1`] = `
Array [
  Array [
    "packages/processor/test/specimens/start.css",
    true,
  ],
  Array [
    "packages/processor/test/specimens/local.css",
    true,
  ],
  Array [
    "packages/processor/test/specimens/folder/folder.css",
    true,
  ],
]
`;

exports[`/processor.js API .invalidate() should throw if no file is passed 1`] = `"invalidate() requires a file argument"`;

exports[`/processor.js API .normalize() should normalize inputs 1`] = `
Array [
  "simple.css",
]
`;

exports[`/processor.js API .output() should allow for seperate source map output 1`] = `
Object {
  "file": "to.css",
  "mappings": "AAAA,wDAAA;AACA,aAAU,WAAW,EAAE;ACDvB,gDAAA;AAIA,YAAS,iBAAiB,EAAE;ACJ5B,gDAAA;AAEA,YDFA,UAAe,EACf,gBAAgB,ECCsB;AACtC,YFHA,uBAAoB,EEGe",
  "names": Array [],
  "sources": Array [
    "packages/processor/test/specimens/folder/folder.css",
    "packages/processor/test/specimens/local.css",
    "packages/processor/test/specimens/start.css",
  ],
  "sourcesContent": Array [
    "@value folder: white;
.folder { margin: 2px; }
",
    "@value one: red;
@value two: blue;
@value folder from \\"./folder/folder.css\\";

.booga { background: green; }
.looga { composes: booga; }
",
    "@value one, two, folder from \\"./local.css\\";
.wooga { composes: booga from \\"./local.css\\"; }
.booga { color: one; background: two; }
.tooga { border: 1px solid folder; }
",
  ],
  "version": 3,
}
`;

exports[`/processor.js API .output() should avoid duplicating files in the output 1`] = `
"/* packages/processor/test/specimens/folder/folder.css */
.mc_folder { margin: 2px; }
/* packages/processor/test/specimens/local.css */
.mc_booga { background: green; }
/* packages/processor/test/specimens/start.css */
.mc_booga { color: red; background: blue; }
.mc_tooga { border: 1px solid white; }
"
`;

exports[`/processor.js API .output() should generate a JSON structure of all the compositions 1`] = `
Object {
  "packages/processor/test/specimens/folder/folder.css": Object {
    "folder": Array [
      "mc_folder",
    ],
  },
  "packages/processor/test/specimens/local.css": Object {
    "booga": Array [
      "mc_booga",
    ],
    "looga": Array [
      "mc_booga",
      "mc_looga",
    ],
  },
  "packages/processor/test/specimens/start.css": Object {
    "booga": Array [
      "mc_booga",
    ],
    "tooga": Array [
      "mc_tooga",
    ],
    "wooga": Array [
      "mc_booga",
      "mc_wooga",
    ],
  },
}
`;

exports[`/processor.js API .output() should generate css representing the output from all added files 1`] = `
"/* packages/processor/test/specimens/folder/folder.css */
.mc_folder { margin: 2px; }
/* packages/processor/test/specimens/simple.css */
.mc_wooga { color: red; }
/* packages/processor/test/specimens/local.css */
.mc_booga { background: green; }
/* packages/processor/test/specimens/start.css */
.mc_booga { color: red; background: blue; }
.mc_tooga { border: 1px solid white; }
"
`;

exports[`/processor.js API .output() should order output by dependencies, then alphabetically 1`] = `
"/* packages/processor/test/specimens/folder/folder.css */
.mc_folder { margin: 2px; }
/* packages/processor/test/specimens/folder/folder2.css */
.mc_folder2 { color: green; }
/* packages/processor/test/specimens/folder/subfolder/subfolder.css */
.mc_subfolder { color: yellow; }
/* packages/processor/test/specimens/local.css */
.mc_booga { background: green; }
/* packages/processor/test/specimens/composes.css */
/* packages/processor/test/specimens/deep.css */
.mc_deep {
    color: black;
}
/* packages/processor/test/specimens/start.css */
.mc_booga { color: red; background: blue; }
.mc_tooga { border: 1px solid white; }
"
`;

exports[`/processor.js API .output() should return a postcss result 1`] = `
"/* packages/processor/test/specimens/folder/folder.css */
.mc_folder { margin: 2px; }
/* packages/processor/test/specimens/local.css */
.mc_booga { background: green; }
/* packages/processor/test/specimens/start.css */
.mc_booga { color: red; background: blue; }
.mc_tooga { border: 1px solid white; }
"
`;

exports[`/processor.js API .output() should support returning output for specified absolute files 1`] = `
"/* packages/processor/test/specimens/start.css */
.mc_booga { color: red; background: blue; }
.mc_tooga { border: 1px solid white; }
"
`;

exports[`/processor.js API .output() should support returning output for specified relative files 1`] = `
"/* packages/processor/test/specimens/start.css */
.mc_booga { color: red; background: blue; }
.mc_tooga { border: 1px solid white; }
"
`;

exports[`/processor.js API .remove() should remove a relative file 1`] = `Array []`;

exports[`/processor.js API .remove() should remove an absolute file 1`] = `Array []`;

exports[`/processor.js API .remove() should remove multiple files 1`] = `
Array [
  "c.css",
]
`;

exports[`/processor.js API .remove() should return an array of removed files 1`] = `
Array [
  "a.css",
  "b.css",
]
`;

exports[`/processor.js API .resolve() should fall back to a default resolver 1`] = `
Array [
  "packages/processor/test/specimens/local.css",
]
`;

exports[`/processor.js API .resolve() should run resolvers until a match is found 1`] = `
Array [
  "packages/processor/test/specimens/local.css",
]
`;

exports[`/processor.js API .root() should process a postcss Root 1`] = `
Object {
  "wooga": Array [
    "mc_wooga",
  ],
}
`;

exports[`/processor.js API .root() should process a postcss Root 2`] = `
Object {
  "wooga": Array [
    "mc_wooga",
  ],
}
`;

exports[`/processor.js API .root() should process a postcss Root 3`] = `".mc_wooga { }"`;

exports[`/processor.js API .string() should process a string 1`] = `
Object {
  "wooga": Array [
    "mc_wooga",
  ],
}
`;

exports[`/processor.js API .string() should process a string 2`] = `
Object {
  "wooga": Array [
    "mc_wooga",
  ],
}
`;

exports[`/processor.js API .string() should process a string 3`] = `".mc_wooga { }"`;
